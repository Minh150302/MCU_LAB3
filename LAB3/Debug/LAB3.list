
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002928  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a34  08002a34  00012a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a58  08002a58  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08002a58  08002a58  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a58  08002a58  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a58  08002a58  00012a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a5c  08002a5c  00012a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000040  08002aa0  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002aa0  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f7b  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e85  00000000  00000000  00029fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002be70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002c928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016672  00000000  00000000  0002d2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c751  00000000  00000000  00043922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824ef  00000000  00000000  00050073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2562  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b8  00000000  00000000  000d25b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a1c 	.word	0x08002a1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002a1c 	.word	0x08002a1c

0800014c <subKeyProcess>:
    KeyReg3[i] = NORMAL_STATE;
    TimeOutForKeyPress[i] = 500;
    flag[i] = 0;
  }
}
void subKeyProcess(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  flag[index] = 1;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <subKeyProcess+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	2000009c 	.word	0x2000009c

0800016c <isButtonPressed>:

int isButtonPressed(int index){
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
  if(flag[index] == 1) {
 8000174:	4a09      	ldr	r2, [pc, #36]	; (800019c <isButtonPressed+0x30>)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d106      	bne.n	800018e <isButtonPressed+0x22>
    flag[index] = 0;
 8000180:	4a06      	ldr	r2, [pc, #24]	; (800019c <isButtonPressed+0x30>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return 1;
 800018a:	2301      	movs	r3, #1
 800018c:	e000      	b.n	8000190 <isButtonPressed+0x24>
  }
  return 0;
 800018e:	2300      	movs	r3, #0
}
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	2000009c 	.word	0x2000009c

080001a0 <getKeyInput>:

void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
  for(int i = 0; i < NUMBER_OF_BUTTONS; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e071      	b.n	8000290 <getKeyInput+0xf0>
    KeyReg0[i] = KeyReg1[i];
 80001ac:	4a3c      	ldr	r2, [pc, #240]	; (80002a0 <getKeyInput+0x100>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493b      	ldr	r1, [pc, #236]	; (80002a4 <getKeyInput+0x104>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    KeyReg1[i] = KeyReg2[i];
 80001bc:	4a3a      	ldr	r2, [pc, #232]	; (80002a8 <getKeyInput+0x108>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4936      	ldr	r1, [pc, #216]	; (80002a0 <getKeyInput+0x100>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    KeyReg2[i] = HAL_GPIO_ReadPin(gpio_port[i], gpio_pin[i]);
 80001cc:	4a37      	ldr	r2, [pc, #220]	; (80002ac <getKeyInput+0x10c>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4936      	ldr	r1, [pc, #216]	; (80002b0 <getKeyInput+0x110>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001dc:	4619      	mov	r1, r3
 80001de:	4610      	mov	r0, r2
 80001e0:	f001 fbe4 	bl	80019ac <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a2f      	ldr	r2, [pc, #188]	; (80002a8 <getKeyInput+0x108>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001f0:	4a2b      	ldr	r2, [pc, #172]	; (80002a0 <getKeyInput+0x100>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	492a      	ldr	r1, [pc, #168]	; (80002a4 <getKeyInput+0x104>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d142      	bne.n	800028a <getKeyInput+0xea>
 8000204:	4a26      	ldr	r2, [pc, #152]	; (80002a0 <getKeyInput+0x100>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4926      	ldr	r1, [pc, #152]	; (80002a8 <getKeyInput+0x108>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d138      	bne.n	800028a <getKeyInput+0xea>
      if (KeyReg3[i] != KeyReg2[i]){
 8000218:	4a26      	ldr	r2, [pc, #152]	; (80002b4 <getKeyInput+0x114>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4921      	ldr	r1, [pc, #132]	; (80002a8 <getKeyInput+0x108>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d011      	beq.n	8000250 <getKeyInput+0xb0>
        KeyReg3[i] = KeyReg2[i];
 800022c:	4a1e      	ldr	r2, [pc, #120]	; (80002a8 <getKeyInput+0x108>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	491f      	ldr	r1, [pc, #124]	; (80002b4 <getKeyInput+0x114>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (KeyReg2[i] == PRESSED_STATE) {
 800023c:	4a1a      	ldr	r2, [pc, #104]	; (80002a8 <getKeyInput+0x108>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d120      	bne.n	800028a <getKeyInput+0xea>
          subKeyProcess(i);
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f7ff ff7f 	bl	800014c <subKeyProcess>
 800024e:	e01c      	b.n	800028a <getKeyInput+0xea>
        }
      } else {
        TimeOutForKeyPress[i]--;
 8000250:	4a19      	ldr	r2, [pc, #100]	; (80002b8 <getKeyInput+0x118>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000258:	1e5a      	subs	r2, r3, #1
 800025a:	4917      	ldr	r1, [pc, #92]	; (80002b8 <getKeyInput+0x118>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (TimeOutForKeyPress[i] == 0){
 8000262:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <getKeyInput+0x118>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d10d      	bne.n	800028a <getKeyInput+0xea>
          TimeOutForKeyPress[i] = 200;
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <getKeyInput+0x118>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	21c8      	movs	r1, #200	; 0xc8
 8000274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          if (KeyReg2[i] == PRESSED_STATE){
 8000278:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <getKeyInput+0x108>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d102      	bne.n	800028a <getKeyInput+0xea>
            subKeyProcess(i);
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	f7ff ff61 	bl	800014c <subKeyProcess>
  for(int i = 0; i < NUMBER_OF_BUTTONS; i++) {
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	3301      	adds	r3, #1
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b02      	cmp	r3, #2
 8000294:	dd8a      	ble.n	80001ac <getKeyInput+0xc>
          }
        }
      }
    }
  }
}
 8000296:	bf00      	nop
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	200000a8 	.word	0x200000a8
 80002a4:	20000090 	.word	0x20000090
 80002a8:	200000c0 	.word	0x200000c0
 80002ac:	20000008 	.word	0x20000008
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000084 	.word	0x20000084
 80002b8:	200000b4 	.word	0x200000b4

080002bc <set_display7SEG>:
		GPIO_TypeDef* c_seg_GPIO_Port, uint16_t c_seg_Pin,
		GPIO_TypeDef* d_seg_GPIO_Port, uint16_t d_seg_Pin,
		GPIO_TypeDef* e_seg_GPIO_Port, uint16_t e_seg_Pin,
		GPIO_TypeDef* f_seg_GPIO_Port, uint16_t f_seg_Pin,
		GPIO_TypeDef* g_seg_GPIO_Port, uint16_t g_seg_Pin)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	603b      	str	r3, [r7, #0]
 80002c8:	4613      	mov	r3, r2
 80002ca:	80fb      	strh	r3, [r7, #6]
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2b09      	cmp	r3, #9
 80002d0:	f200 81d0 	bhi.w	8000674 <set_display7SEG+0x3b8>
 80002d4:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <set_display7SEG+0x20>)
 80002d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002da:	bf00      	nop
 80002dc:	08000305 	.word	0x08000305
 80002e0:	0800035d 	.word	0x0800035d
 80002e4:	080003b5 	.word	0x080003b5
 80002e8:	0800040d 	.word	0x0800040d
 80002ec:	08000465 	.word	0x08000465
 80002f0:	080004bd 	.word	0x080004bd
 80002f4:	08000515 	.word	0x08000515
 80002f8:	0800056d 	.word	0x0800056d
 80002fc:	080005c5 	.word	0x080005c5
 8000300:	0800061d 	.word	0x0800061d
	switch(counter){
		case 0:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, RESET);
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	2200      	movs	r2, #0
 8000308:	4619      	mov	r1, r3
 800030a:	68b8      	ldr	r0, [r7, #8]
 800030c:	f001 fb65 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, RESET);
 8000310:	8b3b      	ldrh	r3, [r7, #24]
 8000312:	2200      	movs	r2, #0
 8000314:	4619      	mov	r1, r3
 8000316:	6838      	ldr	r0, [r7, #0]
 8000318:	f001 fb5f 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, RESET);
 800031c:	8c3b      	ldrh	r3, [r7, #32]
 800031e:	2200      	movs	r2, #0
 8000320:	4619      	mov	r1, r3
 8000322:	69f8      	ldr	r0, [r7, #28]
 8000324:	f001 fb59 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, RESET);
 8000328:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800032a:	2200      	movs	r2, #0
 800032c:	4619      	mov	r1, r3
 800032e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000330:	f001 fb53 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, RESET);
 8000334:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000336:	2200      	movs	r2, #0
 8000338:	4619      	mov	r1, r3
 800033a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800033c:	f001 fb4d 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, RESET);
 8000340:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000342:	2200      	movs	r2, #0
 8000344:	4619      	mov	r1, r3
 8000346:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000348:	f001 fb47 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, SET);
 800034c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000350:	2201      	movs	r2, #1
 8000352:	4619      	mov	r1, r3
 8000354:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000356:	f001 fb40 	bl	80019da <HAL_GPIO_WritePin>
			break;
 800035a:	e18c      	b.n	8000676 <set_display7SEG+0x3ba>
		case 1:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, SET);
 800035c:	88fb      	ldrh	r3, [r7, #6]
 800035e:	2201      	movs	r2, #1
 8000360:	4619      	mov	r1, r3
 8000362:	68b8      	ldr	r0, [r7, #8]
 8000364:	f001 fb39 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, RESET);
 8000368:	8b3b      	ldrh	r3, [r7, #24]
 800036a:	2200      	movs	r2, #0
 800036c:	4619      	mov	r1, r3
 800036e:	6838      	ldr	r0, [r7, #0]
 8000370:	f001 fb33 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, RESET);
 8000374:	8c3b      	ldrh	r3, [r7, #32]
 8000376:	2200      	movs	r2, #0
 8000378:	4619      	mov	r1, r3
 800037a:	69f8      	ldr	r0, [r7, #28]
 800037c:	f001 fb2d 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, SET);
 8000380:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000382:	2201      	movs	r2, #1
 8000384:	4619      	mov	r1, r3
 8000386:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000388:	f001 fb27 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, SET);
 800038c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800038e:	2201      	movs	r2, #1
 8000390:	4619      	mov	r1, r3
 8000392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000394:	f001 fb21 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, SET);
 8000398:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800039a:	2201      	movs	r2, #1
 800039c:	4619      	mov	r1, r3
 800039e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80003a0:	f001 fb1b 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, SET);
 80003a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80003a8:	2201      	movs	r2, #1
 80003aa:	4619      	mov	r1, r3
 80003ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80003ae:	f001 fb14 	bl	80019da <HAL_GPIO_WritePin>
			break;
 80003b2:	e160      	b.n	8000676 <set_display7SEG+0x3ba>
		case 2:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, RESET);
 80003b4:	88fb      	ldrh	r3, [r7, #6]
 80003b6:	2200      	movs	r2, #0
 80003b8:	4619      	mov	r1, r3
 80003ba:	68b8      	ldr	r0, [r7, #8]
 80003bc:	f001 fb0d 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, RESET);
 80003c0:	8b3b      	ldrh	r3, [r7, #24]
 80003c2:	2200      	movs	r2, #0
 80003c4:	4619      	mov	r1, r3
 80003c6:	6838      	ldr	r0, [r7, #0]
 80003c8:	f001 fb07 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, SET);
 80003cc:	8c3b      	ldrh	r3, [r7, #32]
 80003ce:	2201      	movs	r2, #1
 80003d0:	4619      	mov	r1, r3
 80003d2:	69f8      	ldr	r0, [r7, #28]
 80003d4:	f001 fb01 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, RESET);
 80003d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80003da:	2200      	movs	r2, #0
 80003dc:	4619      	mov	r1, r3
 80003de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80003e0:	f001 fafb 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, RESET);
 80003e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80003e6:	2200      	movs	r2, #0
 80003e8:	4619      	mov	r1, r3
 80003ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80003ec:	f001 faf5 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, SET);
 80003f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80003f2:	2201      	movs	r2, #1
 80003f4:	4619      	mov	r1, r3
 80003f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80003f8:	f001 faef 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, RESET);
 80003fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000400:	2200      	movs	r2, #0
 8000402:	4619      	mov	r1, r3
 8000404:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000406:	f001 fae8 	bl	80019da <HAL_GPIO_WritePin>
			break;
 800040a:	e134      	b.n	8000676 <set_display7SEG+0x3ba>
		case 3:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, RESET);
 800040c:	88fb      	ldrh	r3, [r7, #6]
 800040e:	2200      	movs	r2, #0
 8000410:	4619      	mov	r1, r3
 8000412:	68b8      	ldr	r0, [r7, #8]
 8000414:	f001 fae1 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, RESET);
 8000418:	8b3b      	ldrh	r3, [r7, #24]
 800041a:	2200      	movs	r2, #0
 800041c:	4619      	mov	r1, r3
 800041e:	6838      	ldr	r0, [r7, #0]
 8000420:	f001 fadb 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, RESET);
 8000424:	8c3b      	ldrh	r3, [r7, #32]
 8000426:	2200      	movs	r2, #0
 8000428:	4619      	mov	r1, r3
 800042a:	69f8      	ldr	r0, [r7, #28]
 800042c:	f001 fad5 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, RESET);
 8000430:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000432:	2200      	movs	r2, #0
 8000434:	4619      	mov	r1, r3
 8000436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000438:	f001 facf 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, SET);
 800043c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800043e:	2201      	movs	r2, #1
 8000440:	4619      	mov	r1, r3
 8000442:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000444:	f001 fac9 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, SET);
 8000448:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800044a:	2201      	movs	r2, #1
 800044c:	4619      	mov	r1, r3
 800044e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000450:	f001 fac3 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, RESET);
 8000454:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000458:	2200      	movs	r2, #0
 800045a:	4619      	mov	r1, r3
 800045c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800045e:	f001 fabc 	bl	80019da <HAL_GPIO_WritePin>
			break;
 8000462:	e108      	b.n	8000676 <set_display7SEG+0x3ba>
		case 4:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, SET);
 8000464:	88fb      	ldrh	r3, [r7, #6]
 8000466:	2201      	movs	r2, #1
 8000468:	4619      	mov	r1, r3
 800046a:	68b8      	ldr	r0, [r7, #8]
 800046c:	f001 fab5 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, RESET);
 8000470:	8b3b      	ldrh	r3, [r7, #24]
 8000472:	2200      	movs	r2, #0
 8000474:	4619      	mov	r1, r3
 8000476:	6838      	ldr	r0, [r7, #0]
 8000478:	f001 faaf 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, RESET);
 800047c:	8c3b      	ldrh	r3, [r7, #32]
 800047e:	2200      	movs	r2, #0
 8000480:	4619      	mov	r1, r3
 8000482:	69f8      	ldr	r0, [r7, #28]
 8000484:	f001 faa9 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, SET);
 8000488:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800048a:	2201      	movs	r2, #1
 800048c:	4619      	mov	r1, r3
 800048e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000490:	f001 faa3 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, SET);
 8000494:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000496:	2201      	movs	r2, #1
 8000498:	4619      	mov	r1, r3
 800049a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800049c:	f001 fa9d 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, RESET);
 80004a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80004a2:	2200      	movs	r2, #0
 80004a4:	4619      	mov	r1, r3
 80004a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80004a8:	f001 fa97 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, RESET);
 80004ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80004b0:	2200      	movs	r2, #0
 80004b2:	4619      	mov	r1, r3
 80004b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80004b6:	f001 fa90 	bl	80019da <HAL_GPIO_WritePin>
			break;
 80004ba:	e0dc      	b.n	8000676 <set_display7SEG+0x3ba>
		case 5:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, RESET);
 80004bc:	88fb      	ldrh	r3, [r7, #6]
 80004be:	2200      	movs	r2, #0
 80004c0:	4619      	mov	r1, r3
 80004c2:	68b8      	ldr	r0, [r7, #8]
 80004c4:	f001 fa89 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, SET);
 80004c8:	8b3b      	ldrh	r3, [r7, #24]
 80004ca:	2201      	movs	r2, #1
 80004cc:	4619      	mov	r1, r3
 80004ce:	6838      	ldr	r0, [r7, #0]
 80004d0:	f001 fa83 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, RESET);
 80004d4:	8c3b      	ldrh	r3, [r7, #32]
 80004d6:	2200      	movs	r2, #0
 80004d8:	4619      	mov	r1, r3
 80004da:	69f8      	ldr	r0, [r7, #28]
 80004dc:	f001 fa7d 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, RESET);
 80004e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80004e2:	2200      	movs	r2, #0
 80004e4:	4619      	mov	r1, r3
 80004e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80004e8:	f001 fa77 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, SET);
 80004ec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80004ee:	2201      	movs	r2, #1
 80004f0:	4619      	mov	r1, r3
 80004f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80004f4:	f001 fa71 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, RESET);
 80004f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80004fa:	2200      	movs	r2, #0
 80004fc:	4619      	mov	r1, r3
 80004fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000500:	f001 fa6b 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, RESET);
 8000504:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000508:	2200      	movs	r2, #0
 800050a:	4619      	mov	r1, r3
 800050c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800050e:	f001 fa64 	bl	80019da <HAL_GPIO_WritePin>
			break;
 8000512:	e0b0      	b.n	8000676 <set_display7SEG+0x3ba>
		case 6:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, RESET);
 8000514:	88fb      	ldrh	r3, [r7, #6]
 8000516:	2200      	movs	r2, #0
 8000518:	4619      	mov	r1, r3
 800051a:	68b8      	ldr	r0, [r7, #8]
 800051c:	f001 fa5d 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, SET);
 8000520:	8b3b      	ldrh	r3, [r7, #24]
 8000522:	2201      	movs	r2, #1
 8000524:	4619      	mov	r1, r3
 8000526:	6838      	ldr	r0, [r7, #0]
 8000528:	f001 fa57 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, RESET);
 800052c:	8c3b      	ldrh	r3, [r7, #32]
 800052e:	2200      	movs	r2, #0
 8000530:	4619      	mov	r1, r3
 8000532:	69f8      	ldr	r0, [r7, #28]
 8000534:	f001 fa51 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, RESET);
 8000538:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800053a:	2200      	movs	r2, #0
 800053c:	4619      	mov	r1, r3
 800053e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000540:	f001 fa4b 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, RESET);
 8000544:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000546:	2200      	movs	r2, #0
 8000548:	4619      	mov	r1, r3
 800054a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800054c:	f001 fa45 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, RESET);
 8000550:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000552:	2200      	movs	r2, #0
 8000554:	4619      	mov	r1, r3
 8000556:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000558:	f001 fa3f 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, RESET);
 800055c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000560:	2200      	movs	r2, #0
 8000562:	4619      	mov	r1, r3
 8000564:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000566:	f001 fa38 	bl	80019da <HAL_GPIO_WritePin>
			break;
 800056a:	e084      	b.n	8000676 <set_display7SEG+0x3ba>
		case 7:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, RESET);
 800056c:	88fb      	ldrh	r3, [r7, #6]
 800056e:	2200      	movs	r2, #0
 8000570:	4619      	mov	r1, r3
 8000572:	68b8      	ldr	r0, [r7, #8]
 8000574:	f001 fa31 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, RESET);
 8000578:	8b3b      	ldrh	r3, [r7, #24]
 800057a:	2200      	movs	r2, #0
 800057c:	4619      	mov	r1, r3
 800057e:	6838      	ldr	r0, [r7, #0]
 8000580:	f001 fa2b 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, RESET);
 8000584:	8c3b      	ldrh	r3, [r7, #32]
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	69f8      	ldr	r0, [r7, #28]
 800058c:	f001 fa25 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, SET);
 8000590:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000592:	2201      	movs	r2, #1
 8000594:	4619      	mov	r1, r3
 8000596:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000598:	f001 fa1f 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, SET);
 800059c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800059e:	2201      	movs	r2, #1
 80005a0:	4619      	mov	r1, r3
 80005a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80005a4:	f001 fa19 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, SET);
 80005a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80005aa:	2201      	movs	r2, #1
 80005ac:	4619      	mov	r1, r3
 80005ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80005b0:	f001 fa13 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, SET);
 80005b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80005b8:	2201      	movs	r2, #1
 80005ba:	4619      	mov	r1, r3
 80005bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80005be:	f001 fa0c 	bl	80019da <HAL_GPIO_WritePin>
			break;
 80005c2:	e058      	b.n	8000676 <set_display7SEG+0x3ba>
		case 8:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, RESET);
 80005c4:	88fb      	ldrh	r3, [r7, #6]
 80005c6:	2200      	movs	r2, #0
 80005c8:	4619      	mov	r1, r3
 80005ca:	68b8      	ldr	r0, [r7, #8]
 80005cc:	f001 fa05 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, RESET);
 80005d0:	8b3b      	ldrh	r3, [r7, #24]
 80005d2:	2200      	movs	r2, #0
 80005d4:	4619      	mov	r1, r3
 80005d6:	6838      	ldr	r0, [r7, #0]
 80005d8:	f001 f9ff 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, RESET);
 80005dc:	8c3b      	ldrh	r3, [r7, #32]
 80005de:	2200      	movs	r2, #0
 80005e0:	4619      	mov	r1, r3
 80005e2:	69f8      	ldr	r0, [r7, #28]
 80005e4:	f001 f9f9 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, RESET);
 80005e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80005f0:	f001 f9f3 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, RESET);
 80005f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80005f6:	2200      	movs	r2, #0
 80005f8:	4619      	mov	r1, r3
 80005fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80005fc:	f001 f9ed 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, RESET);
 8000600:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000602:	2200      	movs	r2, #0
 8000604:	4619      	mov	r1, r3
 8000606:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000608:	f001 f9e7 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, RESET);
 800060c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000610:	2200      	movs	r2, #0
 8000612:	4619      	mov	r1, r3
 8000614:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000616:	f001 f9e0 	bl	80019da <HAL_GPIO_WritePin>
			break;
 800061a:	e02c      	b.n	8000676 <set_display7SEG+0x3ba>
		case 9:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, RESET);
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	2200      	movs	r2, #0
 8000620:	4619      	mov	r1, r3
 8000622:	68b8      	ldr	r0, [r7, #8]
 8000624:	f001 f9d9 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, RESET);
 8000628:	8b3b      	ldrh	r3, [r7, #24]
 800062a:	2200      	movs	r2, #0
 800062c:	4619      	mov	r1, r3
 800062e:	6838      	ldr	r0, [r7, #0]
 8000630:	f001 f9d3 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, RESET);
 8000634:	8c3b      	ldrh	r3, [r7, #32]
 8000636:	2200      	movs	r2, #0
 8000638:	4619      	mov	r1, r3
 800063a:	69f8      	ldr	r0, [r7, #28]
 800063c:	f001 f9cd 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, RESET);
 8000640:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000642:	2200      	movs	r2, #0
 8000644:	4619      	mov	r1, r3
 8000646:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000648:	f001 f9c7 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, SET);
 800064c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800064e:	2201      	movs	r2, #1
 8000650:	4619      	mov	r1, r3
 8000652:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000654:	f001 f9c1 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, RESET);
 8000658:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800065a:	2200      	movs	r2, #0
 800065c:	4619      	mov	r1, r3
 800065e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000660:	f001 f9bb 	bl	80019da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, RESET);
 8000664:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800066e:	f001 f9b4 	bl	80019da <HAL_GPIO_WritePin>
			break;
 8000672:	e000      	b.n	8000676 <set_display7SEG+0x3ba>
		default:
			break;
 8000674:	bf00      	nop
	}
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop

08000680 <display7SEG>:


void display7SEG(int counter){
 8000680:	b580      	push	{r7, lr}
 8000682:	b08e      	sub	sp, #56	; 0x38
 8000684:	af0c      	add	r7, sp, #48	; 0x30
 8000686:	6078      	str	r0, [r7, #4]
	return set_display7SEG(counter,
 8000688:	2340      	movs	r3, #64	; 0x40
 800068a:	930a      	str	r3, [sp, #40]	; 0x28
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <display7SEG+0x48>)
 800068e:	9309      	str	r3, [sp, #36]	; 0x24
 8000690:	2320      	movs	r3, #32
 8000692:	9308      	str	r3, [sp, #32]
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <display7SEG+0x48>)
 8000696:	9307      	str	r3, [sp, #28]
 8000698:	2310      	movs	r3, #16
 800069a:	9306      	str	r3, [sp, #24]
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <display7SEG+0x48>)
 800069e:	9305      	str	r3, [sp, #20]
 80006a0:	2308      	movs	r3, #8
 80006a2:	9304      	str	r3, [sp, #16]
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <display7SEG+0x48>)
 80006a6:	9303      	str	r3, [sp, #12]
 80006a8:	2304      	movs	r3, #4
 80006aa:	9302      	str	r3, [sp, #8]
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <display7SEG+0x48>)
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	2302      	movs	r3, #2
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <display7SEG+0x48>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	4903      	ldr	r1, [pc, #12]	; (80006c8 <display7SEG+0x48>)
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f7ff fdfe 	bl	80002bc <set_display7SEG>
			SEG3_GPIO_Port,  SEG3_Pin,
			SEG4_GPIO_Port,  SEG4_Pin,
			SEG5_GPIO_Port,  SEG5_Pin,
			SEG6_GPIO_Port,  SEG6_Pin
			);
}
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40010c00 	.word	0x40010c00

080006cc <update7SEG>:


void update7SEG(int index){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	index = index % 4;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	425a      	negs	r2, r3
 80006d8:	f003 0303 	and.w	r3, r3, #3
 80006dc:	f002 0203 	and.w	r2, r2, #3
 80006e0:	bf58      	it	pl
 80006e2:	4253      	negpl	r3, r2
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	f200 8083 	bhi.w	80007f4 <update7SEG+0x128>
 80006ee:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <update7SEG+0x28>)
 80006f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f4:	08000705 	.word	0x08000705
 80006f8:	08000741 	.word	0x08000741
 80006fc:	0800077d 	.word	0x0800077d
 8000700:	080007b9 	.word	0x080007b9
    switch (index){
        case 0:
            //Display the first 7SEG with counter[0]
        	display7SEG(counter[0]);
 8000704:	4b3e      	ldr	r3, [pc, #248]	; (8000800 <update7SEG+0x134>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ffb9 	bl	8000680 <display7SEG>
        	  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000714:	483b      	ldr	r0, [pc, #236]	; (8000804 <update7SEG+0x138>)
 8000716:	f001 f960 	bl	80019da <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000720:	4838      	ldr	r0, [pc, #224]	; (8000804 <update7SEG+0x138>)
 8000722:	f001 f95a 	bl	80019da <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072c:	4835      	ldr	r0, [pc, #212]	; (8000804 <update7SEG+0x138>)
 800072e:	f001 f954 	bl	80019da <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000738:	4832      	ldr	r0, [pc, #200]	; (8000804 <update7SEG+0x138>)
 800073a:	f001 f94e 	bl	80019da <HAL_GPIO_WritePin>
            break;
 800073e:	e05a      	b.n	80007f6 <update7SEG+0x12a>
        case 1:
            //Display the second 7SEG with counter[1]
        	display7SEG(counter[1]);
 8000740:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <update7SEG+0x134>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff9b 	bl	8000680 <display7SEG>
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000750:	482c      	ldr	r0, [pc, #176]	; (8000804 <update7SEG+0x138>)
 8000752:	f001 f942 	bl	80019da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075c:	4829      	ldr	r0, [pc, #164]	; (8000804 <update7SEG+0x138>)
 800075e:	f001 f93c 	bl	80019da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000768:	4826      	ldr	r0, [pc, #152]	; (8000804 <update7SEG+0x138>)
 800076a:	f001 f936 	bl	80019da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000774:	4823      	ldr	r0, [pc, #140]	; (8000804 <update7SEG+0x138>)
 8000776:	f001 f930 	bl	80019da <HAL_GPIO_WritePin>
            break;
 800077a:	e03c      	b.n	80007f6 <update7SEG+0x12a>
        case 2:
//            Display the third 7SEG with counter[2]
        	display7SEG(counter[2]);
 800077c:	4b20      	ldr	r3, [pc, #128]	; (8000800 <update7SEG+0x134>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff7d 	bl	8000680 <display7SEG>
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078c:	481d      	ldr	r0, [pc, #116]	; (8000804 <update7SEG+0x138>)
 800078e:	f001 f924 	bl	80019da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000798:	481a      	ldr	r0, [pc, #104]	; (8000804 <update7SEG+0x138>)
 800079a:	f001 f91e 	bl	80019da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a4:	4817      	ldr	r0, [pc, #92]	; (8000804 <update7SEG+0x138>)
 80007a6:	f001 f918 	bl	80019da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007b0:	4814      	ldr	r0, [pc, #80]	; (8000804 <update7SEG+0x138>)
 80007b2:	f001 f912 	bl	80019da <HAL_GPIO_WritePin>
            break;
 80007b6:	e01e      	b.n	80007f6 <update7SEG+0x12a>
        case 3:
//            Display the forth 7SEG with counter[3]
        	display7SEG(counter[3]);
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <update7SEG+0x134>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff5f 	bl	8000680 <display7SEG>
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c8:	480e      	ldr	r0, [pc, #56]	; (8000804 <update7SEG+0x138>)
 80007ca:	f001 f906 	bl	80019da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <update7SEG+0x138>)
 80007d6:	f001 f900 	bl	80019da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e0:	4808      	ldr	r0, [pc, #32]	; (8000804 <update7SEG+0x138>)
 80007e2:	f001 f8fa 	bl	80019da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <update7SEG+0x138>)
 80007ee:	f001 f8f4 	bl	80019da <HAL_GPIO_WritePin>
            break;
 80007f2:	e000      	b.n	80007f6 <update7SEG+0x12a>
        default:
            break;
 80007f4:	bf00      	nop
    }
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000020 	.word	0x20000020
 8000804:	40010800 	.word	0x40010800

08000808 <set_update7SEG_VALUE>:

void set_update7SEG_VALUE(){
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
	//mode1
	if (mode == MODE_1){
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <set_update7SEG_VALUE+0x60>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b0b      	cmp	r3, #11
 8000812:	d108      	bne.n	8000826 <set_update7SEG_VALUE+0x1e>
		counter[3] = counter[1];
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <set_update7SEG_VALUE+0x64>)
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	4a14      	ldr	r2, [pc, #80]	; (800086c <set_update7SEG_VALUE+0x64>)
 800081a:	60d3      	str	r3, [r2, #12]
		counter[2] = counter[0];
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <set_update7SEG_VALUE+0x64>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <set_update7SEG_VALUE+0x64>)
 8000822:	6093      	str	r3, [r2, #8]
	//mode2, 3, 4
		counter[3] = counter[1];
		counter[1] = NUM % 10;
		counter[2] = NUM / 10;
	}
}
 8000824:	e01c      	b.n	8000860 <set_update7SEG_VALUE+0x58>
		counter[3] = counter[1];
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <set_update7SEG_VALUE+0x64>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	4a10      	ldr	r2, [pc, #64]	; (800086c <set_update7SEG_VALUE+0x64>)
 800082c:	60d3      	str	r3, [r2, #12]
		counter[1] = NUM % 10;
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <set_update7SEG_VALUE+0x68>)
 8000830:	6819      	ldr	r1, [r3, #0]
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <set_update7SEG_VALUE+0x6c>)
 8000834:	fb83 2301 	smull	r2, r3, r3, r1
 8000838:	109a      	asrs	r2, r3, #2
 800083a:	17cb      	asrs	r3, r1, #31
 800083c:	1ad2      	subs	r2, r2, r3
 800083e:	4613      	mov	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	1aca      	subs	r2, r1, r3
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <set_update7SEG_VALUE+0x64>)
 800084a:	605a      	str	r2, [r3, #4]
		counter[2] = NUM / 10;
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <set_update7SEG_VALUE+0x68>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a08      	ldr	r2, [pc, #32]	; (8000874 <set_update7SEG_VALUE+0x6c>)
 8000852:	fb82 1203 	smull	r1, r2, r2, r3
 8000856:	1092      	asrs	r2, r2, #2
 8000858:	17db      	asrs	r3, r3, #31
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	4a03      	ldr	r2, [pc, #12]	; (800086c <set_update7SEG_VALUE+0x64>)
 800085e:	6093      	str	r3, [r2, #8]
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	20000064 	.word	0x20000064
 800086c:	20000020 	.word	0x20000020
 8000870:	20000068 	.word	0x20000068
 8000874:	66666667 	.word	0x66666667

08000878 <fns_automata_run>:

#include "fns_automata.h"

//int counterNUM[2]= {0, 0};

void fns_automata_run(){
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
	if(timer3_flag){
 800087e:	4b63      	ldr	r3, [pc, #396]	; (8000a0c <fns_automata_run+0x194>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d00f      	beq.n	80008a6 <fns_automata_run+0x2e>
		setTimer3(1000);
 8000886:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800088a:	f000 fc83 	bl	8001194 <setTimer3>
//		counterNUM[0]++;
//		counterNUM[1]++;
		counter[0]--;
 800088e:	4b60      	ldr	r3, [pc, #384]	; (8000a10 <fns_automata_run+0x198>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	3b01      	subs	r3, #1
 8000894:	4a5e      	ldr	r2, [pc, #376]	; (8000a10 <fns_automata_run+0x198>)
 8000896:	6013      	str	r3, [r2, #0]
		counter[1]--;
 8000898:	4b5d      	ldr	r3, [pc, #372]	; (8000a10 <fns_automata_run+0x198>)
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	3b01      	subs	r3, #1
 800089e:	4a5c      	ldr	r2, [pc, #368]	; (8000a10 <fns_automata_run+0x198>)
 80008a0:	6053      	str	r3, [r2, #4]
		set_update7SEG_VALUE();
 80008a2:	f7ff ffb1 	bl	8000808 <set_update7SEG_VALUE>
	}

	for(int i = 0; i < 2; i ++){
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	e0a5      	b.n	80009f8 <fns_automata_run+0x180>
		switch(status[i]){
 80008ac:	4a59      	ldr	r2, [pc, #356]	; (8000a14 <fns_automata_run+0x19c>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	f200 8094 	bhi.w	80009e4 <fns_automata_run+0x16c>
 80008bc:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <fns_automata_run+0x4c>)
 80008be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c2:	bf00      	nop
 80008c4:	080008d5 	.word	0x080008d5
 80008c8:	0800091f 	.word	0x0800091f
 80008cc:	08000961 	.word	0x08000961
 80008d0:	080009a3 	.word	0x080009a3
			case INIT:
				ALL_LIGHT_OFF();
 80008d4:	f000 fafa 	bl	8000ecc <ALL_LIGHT_OFF>
				setTimer1(counter_RED*1000, 1);
 80008d8:	4b4f      	ldr	r3, [pc, #316]	; (8000a18 <fns_automata_run+0x1a0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008e0:	fb02 f303 	mul.w	r3, r2, r3
 80008e4:	2101      	movs	r1, #1
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fc22 	bl	8001130 <setTimer1>
				setTimer1(counter_GREEN*1000, 0);
 80008ec:	4b4b      	ldr	r3, [pc, #300]	; (8000a1c <fns_automata_run+0x1a4>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008f4:	fb02 f303 	mul.w	r3, r2, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fc18 	bl	8001130 <setTimer1>
				status[1] = RED_AUTO;
 8000900:	4b44      	ldr	r3, [pc, #272]	; (8000a14 <fns_automata_run+0x19c>)
 8000902:	2202      	movs	r2, #2
 8000904:	605a      	str	r2, [r3, #4]
				status[0] = GREEN_AUTO;
 8000906:	4b43      	ldr	r3, [pc, #268]	; (8000a14 <fns_automata_run+0x19c>)
 8000908:	2203      	movs	r2, #3
 800090a:	601a      	str	r2, [r3, #0]
				counter[1] = counter_RED;
 800090c:	4b42      	ldr	r3, [pc, #264]	; (8000a18 <fns_automata_run+0x1a0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a3f      	ldr	r2, [pc, #252]	; (8000a10 <fns_automata_run+0x198>)
 8000912:	6053      	str	r3, [r2, #4]
				counter[0] = counter_GREEN;
 8000914:	4b41      	ldr	r3, [pc, #260]	; (8000a1c <fns_automata_run+0x1a4>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a3d      	ldr	r2, [pc, #244]	; (8000a10 <fns_automata_run+0x198>)
 800091a:	6013      	str	r3, [r2, #0]
				break;
 800091c:	e069      	b.n	80009f2 <fns_automata_run+0x17a>
			case RED_AUTO:
				RED_LIGHT(i);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f000 fa36 	bl	8000d90 <RED_LIGHT>
				set_update7SEG_VALUE();
 8000924:	f7ff ff70 	bl	8000808 <set_update7SEG_VALUE>
				if(timer1_flag[i]){
 8000928:	4a3d      	ldr	r2, [pc, #244]	; (8000a20 <fns_automata_run+0x1a8>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d059      	beq.n	80009e8 <fns_automata_run+0x170>
					status[i] = GREEN_AUTO;
 8000934:	4a37      	ldr	r2, [pc, #220]	; (8000a14 <fns_automata_run+0x19c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2103      	movs	r1, #3
 800093a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					setTimer1(counter_GREEN*1000, i);
 800093e:	4b37      	ldr	r3, [pc, #220]	; (8000a1c <fns_automata_run+0x1a4>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000946:	fb02 f303 	mul.w	r3, r2, r3
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	4618      	mov	r0, r3
 800094e:	f000 fbef 	bl	8001130 <setTimer1>
					counter[i] = counter_GREEN;
 8000952:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <fns_automata_run+0x1a4>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	492e      	ldr	r1, [pc, #184]	; (8000a10 <fns_automata_run+0x198>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
				break;
 800095e:	e043      	b.n	80009e8 <fns_automata_run+0x170>
			case GREEN_AUTO:
				GREEN_LIGHT(i);
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f000 fa69 	bl	8000e38 <GREEN_LIGHT>
				set_update7SEG_VALUE();
 8000966:	f7ff ff4f 	bl	8000808 <set_update7SEG_VALUE>
				if(timer1_flag[i]){
 800096a:	4a2d      	ldr	r2, [pc, #180]	; (8000a20 <fns_automata_run+0x1a8>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d03a      	beq.n	80009ec <fns_automata_run+0x174>
					status[i] = YELLOW_AUTO;
 8000976:	4a27      	ldr	r2, [pc, #156]	; (8000a14 <fns_automata_run+0x19c>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2104      	movs	r1, #4
 800097c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					setTimer1(counter_AMBER*1000, i);
 8000980:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <fns_automata_run+0x1ac>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	6879      	ldr	r1, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	f000 fbce 	bl	8001130 <setTimer1>
					counter[i] = counter_AMBER;
 8000994:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <fns_automata_run+0x1ac>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	491d      	ldr	r1, [pc, #116]	; (8000a10 <fns_automata_run+0x198>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
				break;
 80009a0:	e024      	b.n	80009ec <fns_automata_run+0x174>
			case YELLOW_AUTO:
				YELLOW_LIGHT(i);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f000 fa1e 	bl	8000de4 <YELLOW_LIGHT>
				set_update7SEG_VALUE();
 80009a8:	f7ff ff2e 	bl	8000808 <set_update7SEG_VALUE>
				if(timer1_flag[i]){
 80009ac:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <fns_automata_run+0x1a8>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d01b      	beq.n	80009f0 <fns_automata_run+0x178>
					status[i] = RED_AUTO;
 80009b8:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <fns_automata_run+0x19c>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2102      	movs	r1, #2
 80009be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					setTimer1(counter_RED*1000, i);
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <fns_automata_run+0x1a0>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ca:	fb02 f303 	mul.w	r3, r2, r3
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fbad 	bl	8001130 <setTimer1>
					counter[i] = counter_RED;
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <fns_automata_run+0x1a0>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	490d      	ldr	r1, [pc, #52]	; (8000a10 <fns_automata_run+0x198>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
				break;
 80009e2:	e005      	b.n	80009f0 <fns_automata_run+0x178>
			default :
				break;
 80009e4:	bf00      	nop
 80009e6:	e004      	b.n	80009f2 <fns_automata_run+0x17a>
				break;
 80009e8:	bf00      	nop
 80009ea:	e002      	b.n	80009f2 <fns_automata_run+0x17a>
				break;
 80009ec:	bf00      	nop
 80009ee:	e000      	b.n	80009f2 <fns_automata_run+0x17a>
				break;
 80009f0:	bf00      	nop
	for(int i = 0; i < 2; i ++){
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3301      	adds	r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	f77f af56 	ble.w	80008ac <fns_automata_run+0x34>
		}
	}
}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000080 	.word	0x20000080
 8000a10:	20000020 	.word	0x20000020
 8000a14:	2000005c 	.word	0x2000005c
 8000a18:	20000014 	.word	0x20000014
 8000a1c:	2000001c 	.word	0x2000001c
 8000a20:	2000006c 	.word	0x2000006c
 8000a24:	20000018 	.word	0x20000018

08000a28 <fns_mode_run>:
#include "fns_mode.h"




void fns_mode_run(){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	if(timer2_flag){
 8000a2c:	4b7a      	ldr	r3, [pc, #488]	; (8000c18 <fns_mode_run+0x1f0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d00a      	beq.n	8000a4a <fns_mode_run+0x22>
	    setTimer2(250);
 8000a34:	20fa      	movs	r0, #250	; 0xfa
 8000a36:	f000 fb97 	bl	8001168 <setTimer2>
	    update7SEG(index++);
 8000a3a:	4b78      	ldr	r3, [pc, #480]	; (8000c1c <fns_mode_run+0x1f4>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	4976      	ldr	r1, [pc, #472]	; (8000c1c <fns_mode_run+0x1f4>)
 8000a42:	600a      	str	r2, [r1, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fe41 	bl	80006cc <update7SEG>
    }

	switch(mode){
 8000a4a:	4b75      	ldr	r3, [pc, #468]	; (8000c20 <fns_mode_run+0x1f8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	2b0d      	cmp	r3, #13
 8000a52:	f200 80d5 	bhi.w	8000c00 <fns_mode_run+0x1d8>
 8000a56:	a201      	add	r2, pc, #4	; (adr r2, 8000a5c <fns_mode_run+0x34>)
 8000a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5c:	08000a95 	.word	0x08000a95
 8000a60:	08000c01 	.word	0x08000c01
 8000a64:	08000c01 	.word	0x08000c01
 8000a68:	08000c01 	.word	0x08000c01
 8000a6c:	08000c01 	.word	0x08000c01
 8000a70:	08000c01 	.word	0x08000c01
 8000a74:	08000c01 	.word	0x08000c01
 8000a78:	08000c01 	.word	0x08000c01
 8000a7c:	08000c01 	.word	0x08000c01
 8000a80:	08000c01 	.word	0x08000c01
 8000a84:	08000ac9 	.word	0x08000ac9
 8000a88:	08000b11 	.word	0x08000b11
 8000a8c:	08000b6b 	.word	0x08000b6b
 8000a90:	08000bc7 	.word	0x08000bc7
		case INIT:
			run_MODE2();
 8000a94:	f000 f8cc 	bl	8000c30 <run_MODE2>
			status[1] = INIT;
 8000a98:	4b62      	ldr	r3, [pc, #392]	; (8000c24 <fns_mode_run+0x1fc>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	605a      	str	r2, [r3, #4]
			status[0] = INIT;
 8000a9e:	4b61      	ldr	r3, [pc, #388]	; (8000c24 <fns_mode_run+0x1fc>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]
			mode = MODE_1;
 8000aa4:	4b5e      	ldr	r3, [pc, #376]	; (8000c20 <fns_mode_run+0x1f8>)
 8000aa6:	220b      	movs	r2, #11
 8000aa8:	601a      	str	r2, [r3, #0]
			setTimer1(100, 1);
 8000aaa:	2101      	movs	r1, #1
 8000aac:	2064      	movs	r0, #100	; 0x64
 8000aae:	f000 fb3f 	bl	8001130 <setTimer1>
			setTimer1(100, 0);
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2064      	movs	r0, #100	; 0x64
 8000ab6:	f000 fb3b 	bl	8001130 <setTimer1>
			setTimer2(100);
 8000aba:	2064      	movs	r0, #100	; 0x64
 8000abc:	f000 fb54 	bl	8001168 <setTimer2>
			setTimer3(100);
 8000ac0:	2064      	movs	r0, #100	; 0x64
 8000ac2:	f000 fb67 	bl	8001194 <setTimer3>
			break;
 8000ac6:	e0a4      	b.n	8000c12 <fns_mode_run+0x1ea>

		case MODE_1:
//			setTimer1(100, 1);
//			setTimer1(100, 0);
			fns_automata_run();
 8000ac8:	f7ff fed6 	bl	8000878 <fns_automata_run>
			if(isButtonPressed(0)){
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff fb4d 	bl	800016c <isButtonPressed>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	f000 8095 	beq.w	8000c04 <fns_mode_run+0x1dc>
				mode = MODE_2;
 8000ada:	4b51      	ldr	r3, [pc, #324]	; (8000c20 <fns_mode_run+0x1f8>)
 8000adc:	220c      	movs	r2, #12
 8000ade:	601a      	str	r2, [r3, #0]
				setTimer1(5000, 0);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ae6:	f000 fb23 	bl	8001130 <setTimer1>
				setTimer1(500, 1);
 8000aea:	2101      	movs	r1, #1
 8000aec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af0:	f000 fb1e 	bl	8001130 <setTimer1>
				ALL_LIGHT_OFF();
 8000af4:	f000 f9ea 	bl	8000ecc <ALL_LIGHT_OFF>
				HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2140      	movs	r1, #64	; 0x40
 8000afc:	484a      	ldr	r0, [pc, #296]	; (8000c28 <fns_mode_run+0x200>)
 8000afe:	f000 ff6c 	bl	80019da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b08:	4847      	ldr	r0, [pc, #284]	; (8000c28 <fns_mode_run+0x200>)
 8000b0a:	f000 ff66 	bl	80019da <HAL_GPIO_WritePin>
			}
			break;
 8000b0e:	e079      	b.n	8000c04 <fns_mode_run+0x1dc>

		case MODE_2:
			run_MODE2();
 8000b10:	f000 f88e 	bl	8000c30 <run_MODE2>
			if(timer1_flag[0]){
 8000b14:	4b45      	ldr	r3, [pc, #276]	; (8000c2c <fns_mode_run+0x204>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d005      	beq.n	8000b28 <fns_mode_run+0x100>
				status[1] = INIT;
 8000b1c:	4b41      	ldr	r3, [pc, #260]	; (8000c24 <fns_mode_run+0x1fc>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	605a      	str	r2, [r3, #4]
				mode = MODE_1;
 8000b22:	4b3f      	ldr	r3, [pc, #252]	; (8000c20 <fns_mode_run+0x1f8>)
 8000b24:	220b      	movs	r2, #11
 8000b26:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(0)){
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f7ff fb1f 	bl	800016c <isButtonPressed>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d069      	beq.n	8000c08 <fns_mode_run+0x1e0>
				mode = MODE_3;
 8000b34:	4b3a      	ldr	r3, [pc, #232]	; (8000c20 <fns_mode_run+0x1f8>)
 8000b36:	220d      	movs	r2, #13
 8000b38:	601a      	str	r2, [r3, #0]
				setTimer1(5000, 0);
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b40:	f000 faf6 	bl	8001130 <setTimer1>
				setTimer1(500, 1);
 8000b44:	2101      	movs	r1, #1
 8000b46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b4a:	f000 faf1 	bl	8001130 <setTimer1>
				ALL_LIGHT_OFF();
 8000b4e:	f000 f9bd 	bl	8000ecc <ALL_LIGHT_OFF>
				HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	4834      	ldr	r0, [pc, #208]	; (8000c28 <fns_mode_run+0x200>)
 8000b58:	f000 ff3f 	bl	80019da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin, RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b62:	4831      	ldr	r0, [pc, #196]	; (8000c28 <fns_mode_run+0x200>)
 8000b64:	f000 ff39 	bl	80019da <HAL_GPIO_WritePin>
			}
			break;
 8000b68:	e04e      	b.n	8000c08 <fns_mode_run+0x1e0>

		case MODE_3:
			run_MODE3();
 8000b6a:	f000 f87b 	bl	8000c64 <run_MODE3>
			if(timer1_flag[0]){
 8000b6e:	4b2f      	ldr	r3, [pc, #188]	; (8000c2c <fns_mode_run+0x204>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d005      	beq.n	8000b82 <fns_mode_run+0x15a>
				status[1] = INIT;
 8000b76:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <fns_mode_run+0x1fc>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	605a      	str	r2, [r3, #4]
				mode = MODE_1;
 8000b7c:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <fns_mode_run+0x1f8>)
 8000b7e:	220b      	movs	r2, #11
 8000b80:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(0)){
 8000b82:	2000      	movs	r0, #0
 8000b84:	f7ff faf2 	bl	800016c <isButtonPressed>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d03e      	beq.n	8000c0c <fns_mode_run+0x1e4>
				mode = MODE_4;
 8000b8e:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <fns_mode_run+0x1f8>)
 8000b90:	220e      	movs	r2, #14
 8000b92:	601a      	str	r2, [r3, #0]
				setTimer1(5000, 0);
 8000b94:	2100      	movs	r1, #0
 8000b96:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b9a:	f000 fac9 	bl	8001130 <setTimer1>
				setTimer1(500, 1);
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ba4:	f000 fac4 	bl	8001130 <setTimer1>
				ALL_LIGHT_OFF();
 8000ba8:	f000 f990 	bl	8000ecc <ALL_LIGHT_OFF>
				HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb2:	481d      	ldr	r0, [pc, #116]	; (8000c28 <fns_mode_run+0x200>)
 8000bb4:	f000 ff11 	bl	80019da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbe:	481a      	ldr	r0, [pc, #104]	; (8000c28 <fns_mode_run+0x200>)
 8000bc0:	f000 ff0b 	bl	80019da <HAL_GPIO_WritePin>
			}
			break;
 8000bc4:	e022      	b.n	8000c0c <fns_mode_run+0x1e4>
		case MODE_4:
			run_MODE4();
 8000bc6:	f000 f867 	bl	8000c98 <run_MODE4>
			if(timer1_flag[0]){
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <fns_mode_run+0x204>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d005      	beq.n	8000bde <fns_mode_run+0x1b6>
				status[1] = INIT;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <fns_mode_run+0x1fc>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	605a      	str	r2, [r3, #4]
				mode = MODE_1;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <fns_mode_run+0x1f8>)
 8000bda:	220b      	movs	r2, #11
 8000bdc:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(0)){
 8000bde:	2000      	movs	r0, #0
 8000be0:	f7ff fac4 	bl	800016c <isButtonPressed>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d012      	beq.n	8000c10 <fns_mode_run+0x1e8>
				mode = MODE_1;
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <fns_mode_run+0x1f8>)
 8000bec:	220b      	movs	r2, #11
 8000bee:	601a      	str	r2, [r3, #0]
				setTimer1(5000, 0);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bf6:	f000 fa9b 	bl	8001130 <setTimer1>
				ALL_LIGHT_OFF();
 8000bfa:	f000 f967 	bl	8000ecc <ALL_LIGHT_OFF>
			}
			break;
 8000bfe:	e007      	b.n	8000c10 <fns_mode_run+0x1e8>
		default:
			break;
 8000c00:	bf00      	nop
 8000c02:	e006      	b.n	8000c12 <fns_mode_run+0x1ea>
			break;
 8000c04:	bf00      	nop
 8000c06:	e004      	b.n	8000c12 <fns_mode_run+0x1ea>
			break;
 8000c08:	bf00      	nop
 8000c0a:	e002      	b.n	8000c12 <fns_mode_run+0x1ea>
			break;
 8000c0c:	bf00      	nop
 8000c0e:	e000      	b.n	8000c12 <fns_mode_run+0x1ea>
			break;
 8000c10:	bf00      	nop
	}
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000078 	.word	0x20000078
 8000c1c:	20000030 	.word	0x20000030
 8000c20:	20000064 	.word	0x20000064
 8000c24:	2000005c 	.word	0x2000005c
 8000c28:	40010800 	.word	0x40010800
 8000c2c:	2000006c 	.word	0x2000006c

08000c30 <run_MODE2>:
 *      Author: Huy Minh
 */

#include "func_setting_mode.h"

void run_MODE2(){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	if(timer1_flag[1]){
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <run_MODE2+0x2c>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d00d      	beq.n	8000c58 <run_MODE2+0x28>
		HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000c3c:	2140      	movs	r1, #64	; 0x40
 8000c3e:	4808      	ldr	r0, [pc, #32]	; (8000c60 <run_MODE2+0x30>)
 8000c40:	f000 fee3 	bl	8001a0a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000c44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <run_MODE2+0x30>)
 8000c4a:	f000 fede 	bl	8001a0a <HAL_GPIO_TogglePin>
		setTimer1(500, 1);
 8000c4e:	2101      	movs	r1, #1
 8000c50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c54:	f000 fa6c 	bl	8001130 <setTimer1>
	}
};
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	2000006c 	.word	0x2000006c
 8000c60:	40010800 	.word	0x40010800

08000c64 <run_MODE3>:
void run_MODE3(){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	if(timer1_flag[1]){
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <run_MODE3+0x2c>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d00d      	beq.n	8000c8c <run_MODE3+0x28>
		HAL_GPIO_TogglePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin);
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	4808      	ldr	r0, [pc, #32]	; (8000c94 <run_MODE3+0x30>)
 8000c74:	f000 fec9 	bl	8001a0a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin);
 8000c78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c7c:	4805      	ldr	r0, [pc, #20]	; (8000c94 <run_MODE3+0x30>)
 8000c7e:	f000 fec4 	bl	8001a0a <HAL_GPIO_TogglePin>
		setTimer1(500, 1);
 8000c82:	2101      	movs	r1, #1
 8000c84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c88:	f000 fa52 	bl	8001130 <setTimer1>
	}
};
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	2000006c 	.word	0x2000006c
 8000c94:	40010800 	.word	0x40010800

08000c98 <run_MODE4>:
void run_MODE4(){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	if(timer1_flag[1]){
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <run_MODE4+0x30>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d00e      	beq.n	8000cc2 <run_MODE4+0x2a>
		HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000ca4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca8:	4808      	ldr	r0, [pc, #32]	; (8000ccc <run_MODE4+0x34>)
 8000caa:	f000 feae 	bl	8001a0a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8000cae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb2:	4806      	ldr	r0, [pc, #24]	; (8000ccc <run_MODE4+0x34>)
 8000cb4:	f000 fea9 	bl	8001a0a <HAL_GPIO_TogglePin>
		setTimer1(500, 1);
 8000cb8:	2101      	movs	r1, #1
 8000cba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cbe:	f000 fa37 	bl	8001130 <setTimer1>
	}
};
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	2000006c 	.word	0x2000006c
 8000ccc:	40010800 	.word	0x40010800

08000cd0 <RED_LIGHT_mode>:


void RED_LIGHT_mode(
		GPIO_TypeDef* LED_RED_GPIO_Port, uint16_t LED_RED_Pin,
		GPIO_TypeDef* LED_AMBER_GPIO_Port, uint16_t LED_AMBER_Pin,
		GPIO_TypeDef* LED_GREEN_GPIO_Port, uint16_t LED_GREEN_Pin){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	460b      	mov	r3, r1
 8000cde:	817b      	strh	r3, [r7, #10]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	813b      	strh	r3, [r7, #8]
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8000ce4:	897b      	ldrh	r3, [r7, #10]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	4619      	mov	r1, r3
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f000 fe75 	bl	80019da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_AMBER_GPIO_Port, LED_AMBER_Pin, SET);
 8000cf0:	893b      	ldrh	r3, [r7, #8]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f000 fe6f 	bl	80019da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000cfc:	8bbb      	ldrh	r3, [r7, #28]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4619      	mov	r1, r3
 8000d02:	69b8      	ldr	r0, [r7, #24]
 8000d04:	f000 fe69 	bl	80019da <HAL_GPIO_WritePin>
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <YELLOW_LIGHT_mode>:

void YELLOW_LIGHT_mode(
		GPIO_TypeDef* LED_RED_GPIO_Port, uint16_t LED_RED_Pin,
		GPIO_TypeDef* LED_AMBER_GPIO_Port, uint16_t LED_AMBER_Pin,
		GPIO_TypeDef* LED_GREEN_GPIO_Port, uint16_t LED_GREEN_Pin){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	817b      	strh	r3, [r7, #10]
 8000d20:	4613      	mov	r3, r2
 8000d22:	813b      	strh	r3, [r7, #8]
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000d24:	897b      	ldrh	r3, [r7, #10]
 8000d26:	2201      	movs	r2, #1
 8000d28:	4619      	mov	r1, r3
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f000 fe55 	bl	80019da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_AMBER_GPIO_Port, LED_AMBER_Pin, RESET);
 8000d30:	893b      	ldrh	r3, [r7, #8]
 8000d32:	2200      	movs	r2, #0
 8000d34:	4619      	mov	r1, r3
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f000 fe4f 	bl	80019da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000d3c:	8bbb      	ldrh	r3, [r7, #28]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4619      	mov	r1, r3
 8000d42:	69b8      	ldr	r0, [r7, #24]
 8000d44:	f000 fe49 	bl	80019da <HAL_GPIO_WritePin>
}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <GREEN_LIGHT_mode>:

void GREEN_LIGHT_mode(
		GPIO_TypeDef* LED_RED_GPIO_Port, uint16_t LED_RED_Pin,
		GPIO_TypeDef* LED_AMBER_GPIO_Port, uint16_t LED_AMBER_Pin,
		GPIO_TypeDef* LED_GREEN_GPIO_Port, uint16_t LED_GREEN_Pin){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	817b      	strh	r3, [r7, #10]
 8000d60:	4613      	mov	r3, r2
 8000d62:	813b      	strh	r3, [r7, #8]
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000d64:	897b      	ldrh	r3, [r7, #10]
 8000d66:	2201      	movs	r2, #1
 8000d68:	4619      	mov	r1, r3
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f000 fe35 	bl	80019da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_AMBER_GPIO_Port, LED_AMBER_Pin, SET);
 8000d70:	893b      	ldrh	r3, [r7, #8]
 8000d72:	2201      	movs	r2, #1
 8000d74:	4619      	mov	r1, r3
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f000 fe2f 	bl	80019da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 8000d7c:	8bbb      	ldrh	r3, [r7, #28]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4619      	mov	r1, r3
 8000d82:	69b8      	ldr	r0, [r7, #24]
 8000d84:	f000 fe29 	bl	80019da <HAL_GPIO_WritePin>

}
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <RED_LIGHT>:


void RED_LIGHT(int i){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	6078      	str	r0, [r7, #4]
	if (i % 2 == 1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	bfb8      	it	lt
 8000da2:	425b      	neglt	r3, r3
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d10b      	bne.n	8000dc0 <RED_LIGHT+0x30>
		return RED_LIGHT_mode(
 8000da8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <RED_LIGHT+0x50>)
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <RED_LIGHT+0x50>)
 8000db6:	2140      	movs	r1, #64	; 0x40
 8000db8:	4809      	ldr	r0, [pc, #36]	; (8000de0 <RED_LIGHT+0x50>)
 8000dba:	f7ff ff89 	bl	8000cd0 <RED_LIGHT_mode>
 8000dbe:	e00c      	b.n	8000dda <RED_LIGHT+0x4a>
		  LED_RED1_GPIO_Port, LED_RED1_Pin,
		  LED_AMBER1_GPIO_Port, LED_AMBER1_Pin,
		  LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
	else
		return RED_LIGHT_mode(
 8000dc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dc4:	9301      	str	r3, [sp, #4]
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <RED_LIGHT+0x50>)
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <RED_LIGHT+0x50>)
 8000dd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <RED_LIGHT+0x50>)
 8000dd6:	f7ff ff7b 	bl	8000cd0 <RED_LIGHT_mode>
			  LED_RED2_GPIO_Port, LED_RED2_Pin,
			  LED_AMBER2_GPIO_Port, LED_AMBER2_Pin,
			  LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);

}
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40010800 	.word	0x40010800

08000de4 <YELLOW_LIGHT>:

void YELLOW_LIGHT(int i){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af02      	add	r7, sp, #8
 8000dea:	6078      	str	r0, [r7, #4]
	if (i % 2 == 1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	bfb8      	it	lt
 8000df6:	425b      	neglt	r3, r3
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d10b      	bne.n	8000e14 <YELLOW_LIGHT+0x30>
		return YELLOW_LIGHT_mode(
 8000dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e00:	9301      	str	r3, [sp, #4]
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <YELLOW_LIGHT+0x50>)
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <YELLOW_LIGHT+0x50>)
 8000e0a:	2140      	movs	r1, #64	; 0x40
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <YELLOW_LIGHT+0x50>)
 8000e0e:	f7ff ff7f 	bl	8000d10 <YELLOW_LIGHT_mode>
 8000e12:	e00c      	b.n	8000e2e <YELLOW_LIGHT+0x4a>
		  LED_RED1_GPIO_Port, LED_RED1_Pin,
		  LED_AMBER1_GPIO_Port, LED_AMBER1_Pin,
		  LED_GREEN1_GPIO_Port, LED_GREEN1_Pin
		  );
	else
		return YELLOW_LIGHT_mode(
 8000e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <YELLOW_LIGHT+0x50>)
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <YELLOW_LIGHT+0x50>)
 8000e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <YELLOW_LIGHT+0x50>)
 8000e2a:	f7ff ff71 	bl	8000d10 <YELLOW_LIGHT_mode>
		  LED_RED2_GPIO_Port, LED_RED2_Pin,
		  LED_AMBER2_GPIO_Port, LED_AMBER2_Pin,
		  LED_GREEN2_GPIO_Port, LED_GREEN2_Pin
		  );
}
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40010800 	.word	0x40010800

08000e38 <GREEN_LIGHT>:

void GREEN_LIGHT(int i){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	6078      	str	r0, [r7, #4]
	if (i % 2 == 1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	bfb8      	it	lt
 8000e4a:	425b      	neglt	r3, r3
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d10b      	bne.n	8000e68 <GREEN_LIGHT+0x30>
		return GREEN_LIGHT_mode(
 8000e50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e54:	9301      	str	r3, [sp, #4]
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <GREEN_LIGHT+0x50>)
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <GREEN_LIGHT+0x50>)
 8000e5e:	2140      	movs	r1, #64	; 0x40
 8000e60:	4809      	ldr	r0, [pc, #36]	; (8000e88 <GREEN_LIGHT+0x50>)
 8000e62:	f7ff ff75 	bl	8000d50 <GREEN_LIGHT_mode>
 8000e66:	e00c      	b.n	8000e82 <GREEN_LIGHT+0x4a>
		  LED_RED1_GPIO_Port, LED_RED1_Pin,
		  LED_AMBER1_GPIO_Port, LED_AMBER1_Pin,
		  LED_GREEN1_GPIO_Port, LED_GREEN1_Pin
		  );
	else
		return GREEN_LIGHT_mode(
 8000e68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <GREEN_LIGHT+0x50>)
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <GREEN_LIGHT+0x50>)
 8000e78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <GREEN_LIGHT+0x50>)
 8000e7e:	f7ff ff67 	bl	8000d50 <GREEN_LIGHT_mode>
		  LED_RED2_GPIO_Port, LED_RED2_Pin,
		  LED_AMBER2_GPIO_Port, LED_AMBER2_Pin,
		  LED_GREEN2_GPIO_Port, LED_GREEN2_Pin
		  );
}
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40010800 	.word	0x40010800

08000e8c <LIGHT_OFF>:


void LIGHT_OFF(
		GPIO_TypeDef* LED_RED_GPIO_Port, uint16_t LED_RED_Pin,
		GPIO_TypeDef* LED_AMBER_GPIO_Port, uint16_t LED_AMBER_Pin,
		GPIO_TypeDef* LED_GREEN_GPIO_Port, uint16_t LED_GREEN_Pin){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	461a      	mov	r2, r3
 8000e98:	460b      	mov	r3, r1
 8000e9a:	817b      	strh	r3, [r7, #10]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	813b      	strh	r3, [r7, #8]
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000ea0:	897b      	ldrh	r3, [r7, #10]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f000 fd97 	bl	80019da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_AMBER_GPIO_Port, LED_AMBER_Pin, SET);
 8000eac:	893b      	ldrh	r3, [r7, #8]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f000 fd91 	bl	80019da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000eb8:	8bbb      	ldrh	r3, [r7, #28]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	69b8      	ldr	r0, [r7, #24]
 8000ec0:	f000 fd8b 	bl	80019da <HAL_GPIO_WritePin>
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <ALL_LIGHT_OFF>:

void ALL_LIGHT_OFF(){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af02      	add	r7, sp, #8
	LIGHT_OFF(
 8000ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <ALL_LIGHT_OFF+0x3c>)
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <ALL_LIGHT_OFF+0x3c>)
 8000ee0:	2140      	movs	r1, #64	; 0x40
 8000ee2:	4809      	ldr	r0, [pc, #36]	; (8000f08 <ALL_LIGHT_OFF+0x3c>)
 8000ee4:	f7ff ffd2 	bl	8000e8c <LIGHT_OFF>
	  LED_RED1_GPIO_Port, LED_RED1_Pin,
	  LED_AMBER1_GPIO_Port, LED_AMBER1_Pin,
	  LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
	LIGHT_OFF(
 8000ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <ALL_LIGHT_OFF+0x3c>)
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <ALL_LIGHT_OFF+0x3c>)
 8000ef8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <ALL_LIGHT_OFF+0x3c>)
 8000efe:	f7ff ffc5 	bl	8000e8c <LIGHT_OFF>
		  LED_RED2_GPIO_Port, LED_RED2_Pin,
		  LED_AMBER2_GPIO_Port, LED_AMBER2_Pin,
		  LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40010800 	.word	0x40010800

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f10:	f000 fa62 	bl	80013d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f14:	f000 f812 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f18:	f000 f898 	bl	800104c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f1c:	f000 f84a 	bl	8000fb4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <main+0x28>)
 8000f22:	f001 f9b7 	bl	8002294 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  status = INIT;
  mode = INIT;
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <main+0x2c>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fns_mode_run();
 8000f2c:	f7ff fd7c 	bl	8000a28 <fns_mode_run>
  {
 8000f30:	e7fc      	b.n	8000f2c <main+0x20>
 8000f32:	bf00      	nop
 8000f34:	200000cc 	.word	0x200000cc
 8000f38:	20000064 	.word	0x20000064

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b090      	sub	sp, #64	; 0x40
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 0318 	add.w	r3, r7, #24
 8000f46:	2228      	movs	r2, #40	; 0x28
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 fd5e 	bl	8002a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f62:	2301      	movs	r3, #1
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f66:	2310      	movs	r3, #16
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fd62 	bl	8001a3c <HAL_RCC_OscConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f7e:	f000 f8d1 	bl	8001124 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f82:	230f      	movs	r3, #15
 8000f84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 ffce 	bl	8001f3c <HAL_RCC_ClockConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fa6:	f000 f8bd 	bl	8001124 <Error_Handler>
  }
}
 8000faa:	bf00      	nop
 8000fac:	3740      	adds	r7, #64	; 0x40
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <MX_TIM2_Init+0x94>)
 8000fd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_TIM2_Init+0x94>)
 8000fda:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b19      	ldr	r3, [pc, #100]	; (8001048 <MX_TIM2_Init+0x94>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_TIM2_Init+0x94>)
 8000fe8:	2209      	movs	r2, #9
 8000fea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MX_TIM2_Init+0x94>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MX_TIM2_Init+0x94>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ff8:	4813      	ldr	r0, [pc, #76]	; (8001048 <MX_TIM2_Init+0x94>)
 8000ffa:	f001 f8fb 	bl	80021f4 <HAL_TIM_Base_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001004:	f000 f88e 	bl	8001124 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	4619      	mov	r1, r3
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <MX_TIM2_Init+0x94>)
 8001016:	f001 fa91 	bl	800253c <HAL_TIM_ConfigClockSource>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001020:	f000 f880 	bl	8001124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800102c:	463b      	mov	r3, r7
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_TIM2_Init+0x94>)
 8001032:	f001 fc5d 	bl	80028f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800103c:	f000 f872 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200000cc 	.word	0x200000cc

0800104c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	f107 0308 	add.w	r3, r7, #8
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4b27      	ldr	r3, [pc, #156]	; (8001100 <MX_GPIO_Init+0xb4>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a26      	ldr	r2, [pc, #152]	; (8001100 <MX_GPIO_Init+0xb4>)
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b24      	ldr	r3, [pc, #144]	; (8001100 <MX_GPIO_Init+0xb4>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001078:	4b21      	ldr	r3, [pc, #132]	; (8001100 <MX_GPIO_Init+0xb4>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a20      	ldr	r2, [pc, #128]	; (8001100 <MX_GPIO_Init+0xb4>)
 800107e:	f043 0308 	orr.w	r3, r3, #8
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <MX_GPIO_Init+0xb4>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0308 	and.w	r3, r3, #8
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_AMBER1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8001090:	2200      	movs	r2, #0
 8001092:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8001096:	481b      	ldr	r0, [pc, #108]	; (8001104 <MX_GPIO_Init+0xb8>)
 8001098:	f000 fc9f 	bl	80019da <HAL_GPIO_WritePin>
                          |LED_AMBER2_Pin|LED_GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 800109c:	2200      	movs	r2, #0
 800109e:	217f      	movs	r1, #127	; 0x7f
 80010a0:	4819      	ldr	r0, [pc, #100]	; (8001108 <MX_GPIO_Init+0xbc>)
 80010a2:	f000 fc9a 	bl	80019da <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 80010a6:	230e      	movs	r3, #14
 80010a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	4619      	mov	r1, r3
 80010b8:	4812      	ldr	r0, [pc, #72]	; (8001104 <MX_GPIO_Init+0xb8>)
 80010ba:	f000 fafd 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED_AMBER1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_AMBER2_Pin LED_GREEN2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_AMBER1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 80010be:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80010c2:	60bb      	str	r3, [r7, #8]
                          |LED_AMBER2_Pin|LED_GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2302      	movs	r3, #2
 80010ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	4619      	mov	r1, r3
 80010d6:	480b      	ldr	r0, [pc, #44]	; (8001104 <MX_GPIO_Init+0xb8>)
 80010d8:	f000 faee 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80010dc:	237f      	movs	r3, #127	; 0x7f
 80010de:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2302      	movs	r3, #2
 80010ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	4619      	mov	r1, r3
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_GPIO_Init+0xbc>)
 80010f4:	f000 fae0 	bl	80016b8 <HAL_GPIO_Init>

}
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000
 8001104:	40010800 	.word	0x40010800
 8001108:	40010c00 	.word	0x40010c00

0800110c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	timerRun();
 8001114:	f000 f854 	bl	80011c0 <timerRun>
	getKeyInput();
 8001118:	f7ff f842 	bl	80001a0 <getKeyInput>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112c:	e7fe      	b.n	800112c <Error_Handler+0x8>
	...

08001130 <setTimer1>:
int timer3_flag = 0;


const int TICK = 10;

void setTimer1(int duration, int index){
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	timer1_counter[index] = duration/TICK;
 800113a:	220a      	movs	r2, #10
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	fb93 f2f2 	sdiv	r2, r3, r2
 8001142:	4907      	ldr	r1, [pc, #28]	; (8001160 <setTimer1+0x30>)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer1_flag[index] = 0;
 800114a:	4a06      	ldr	r2, [pc, #24]	; (8001164 <setTimer1+0x34>)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	2100      	movs	r1, #0
 8001150:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000114 	.word	0x20000114
 8001164:	2000006c 	.word	0x2000006c

08001168 <setTimer2>:

void setTimer2(int duration){
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8001170:	220a      	movs	r2, #10
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	fb93 f3f2 	sdiv	r3, r3, r2
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <setTimer2+0x24>)
 800117a:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <setTimer2+0x28>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	20000074 	.word	0x20000074
 8001190:	20000078 	.word	0x20000078

08001194 <setTimer3>:

void setTimer3(int duration){
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 800119c:	220a      	movs	r2, #10
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80011a4:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <setTimer3+0x24>)
 80011a6:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <setTimer3+0x28>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	2000007c 	.word	0x2000007c
 80011bc:	20000080 	.word	0x20000080

080011c0 <timerRun>:

void timerRun(){
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; i++){
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	e01c      	b.n	8001206 <timerRun+0x46>
		if(timer1_counter[i] > 0){
 80011cc:	4a22      	ldr	r2, [pc, #136]	; (8001258 <timerRun+0x98>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	dd13      	ble.n	8001200 <timerRun+0x40>
			timer1_counter[i]--;
 80011d8:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <timerRun+0x98>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e0:	1e5a      	subs	r2, r3, #1
 80011e2:	491d      	ldr	r1, [pc, #116]	; (8001258 <timerRun+0x98>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer1_counter[i] <= 0){
 80011ea:	4a1b      	ldr	r2, [pc, #108]	; (8001258 <timerRun+0x98>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	dc04      	bgt.n	8001200 <timerRun+0x40>
				timer1_flag[i] = 1;
 80011f6:	4a19      	ldr	r2, [pc, #100]	; (800125c <timerRun+0x9c>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2101      	movs	r1, #1
 80011fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 2; i++){
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3301      	adds	r3, #1
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b01      	cmp	r3, #1
 800120a:	dddf      	ble.n	80011cc <timerRun+0xc>
			}
		}
	}
	if(timer2_counter > 0){
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <timerRun+0xa0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	dd0b      	ble.n	800122c <timerRun+0x6c>
		timer2_counter--;
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <timerRun+0xa0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3b01      	subs	r3, #1
 800121a:	4a11      	ldr	r2, [pc, #68]	; (8001260 <timerRun+0xa0>)
 800121c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <timerRun+0xa0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	dc02      	bgt.n	800122c <timerRun+0x6c>
			timer2_flag = 1;
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <timerRun+0xa4>)
 8001228:	2201      	movs	r2, #1
 800122a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <timerRun+0xa8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	dd0b      	ble.n	800124c <timerRun+0x8c>
		timer3_counter--;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <timerRun+0xa8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	3b01      	subs	r3, #1
 800123a:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <timerRun+0xa8>)
 800123c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <timerRun+0xa8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	dc02      	bgt.n	800124c <timerRun+0x8c>
			timer3_flag = 1;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <timerRun+0xac>)
 8001248:	2201      	movs	r2, #1
 800124a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000114 	.word	0x20000114
 800125c:	2000006c 	.word	0x2000006c
 8001260:	20000074 	.word	0x20000074
 8001264:	20000078 	.word	0x20000078
 8001268:	2000007c 	.word	0x2000007c
 800126c:	20000080 	.word	0x20000080

08001270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_MspInit+0x5c>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	4a14      	ldr	r2, [pc, #80]	; (80012cc <HAL_MspInit+0x5c>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6193      	str	r3, [r2, #24]
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_MspInit+0x5c>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_MspInit+0x5c>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <HAL_MspInit+0x5c>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	61d3      	str	r3, [r2, #28]
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_MspInit+0x5c>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_MspInit+0x60>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <HAL_MspInit+0x60>)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010000 	.word	0x40010000

080012d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e4:	d113      	bne.n	800130e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <HAL_TIM_Base_MspInit+0x44>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <HAL_TIM_Base_MspInit+0x44>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	61d3      	str	r3, [r2, #28]
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_TIM_Base_MspInit+0x44>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	201c      	movs	r0, #28
 8001304:	f000 f9a1 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001308:	201c      	movs	r0, #28
 800130a:	f000 f9ba 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <NMI_Handler+0x4>

08001322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <MemManage_Handler+0x4>

0800132e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <UsageFault_Handler+0x4>

0800133a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr

08001346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr

08001352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001362:	f000 f87f 	bl	8001464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <TIM2_IRQHandler+0x10>)
 8001372:	f000 ffdb 	bl	800232c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200000cc 	.word	0x200000cc

08001380 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800138c:	f7ff fff8 	bl	8001380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001390:	480b      	ldr	r0, [pc, #44]	; (80013c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001392:	490c      	ldr	r1, [pc, #48]	; (80013c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001398:	e002      	b.n	80013a0 <LoopCopyDataInit>

0800139a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800139c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139e:	3304      	adds	r3, #4

080013a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a4:	d3f9      	bcc.n	800139a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a6:	4a09      	ldr	r2, [pc, #36]	; (80013cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013a8:	4c09      	ldr	r4, [pc, #36]	; (80013d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ac:	e001      	b.n	80013b2 <LoopFillZerobss>

080013ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b0:	3204      	adds	r2, #4

080013b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b4:	d3fb      	bcc.n	80013ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013b6:	f001 fb05 	bl	80029c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ba:	f7ff fda7 	bl	8000f0c <main>
  bx lr
 80013be:	4770      	bx	lr
  ldr r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c4:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80013c8:	08002a60 	.word	0x08002a60
  ldr r2, =_sbss
 80013cc:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80013d0:	20000120 	.word	0x20000120

080013d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC1_2_IRQHandler>
	...

080013d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_Init+0x28>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <HAL_Init+0x28>)
 80013e2:	f043 0310 	orr.w	r3, r3, #16
 80013e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e8:	2003      	movs	r0, #3
 80013ea:	f000 f923 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ee:	200f      	movs	r0, #15
 80013f0:	f000 f808 	bl	8001404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f4:	f7ff ff3c 	bl	8001270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40022000 	.word	0x40022000

08001404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_InitTick+0x54>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_InitTick+0x58>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141a:	fbb3 f3f1 	udiv	r3, r3, r1
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f93b 	bl	800169e <HAL_SYSTICK_Config>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e00e      	b.n	8001450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d80a      	bhi.n	800144e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001438:	2200      	movs	r2, #0
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f000 f903 	bl	800164a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001444:	4a06      	ldr	r2, [pc, #24]	; (8001460 <HAL_InitTick+0x5c>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	e000      	b.n	8001450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000034 	.word	0x20000034
 800145c:	2000003c 	.word	0x2000003c
 8001460:	20000038 	.word	0x20000038

08001464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_IncTick+0x1c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_IncTick+0x20>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4413      	add	r3, r2
 8001474:	4a03      	ldr	r2, [pc, #12]	; (8001484 <HAL_IncTick+0x20>)
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	2000003c 	.word	0x2000003c
 8001484:	2000011c 	.word	0x2000011c

08001488 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b02      	ldr	r3, [pc, #8]	; (8001498 <HAL_GetTick+0x10>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	2000011c 	.word	0x2000011c

0800149c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ce:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60d3      	str	r3, [r2, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <__NVIC_GetPriorityGrouping+0x18>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 0307 	and.w	r3, r3, #7
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db0b      	blt.n	800152a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f003 021f 	and.w	r2, r3, #31
 8001518:	4906      	ldr	r1, [pc, #24]	; (8001534 <__NVIC_EnableIRQ+0x34>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	2001      	movs	r0, #1
 8001522:	fa00 f202 	lsl.w	r2, r0, r2
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	e000e100 	.word	0xe000e100

08001538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
         );
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f7ff ff90 	bl	8001538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff2d 	bl	800149c <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff42 	bl	80014e4 <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff90 	bl	800158c <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5f 	bl	8001538 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff35 	bl	8001500 <__NVIC_EnableIRQ>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffa2 	bl	80015f0 <SysTick_Config>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b08b      	sub	sp, #44	; 0x2c
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ca:	e148      	b.n	800195e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016cc:	2201      	movs	r2, #1
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f040 8137 	bne.w	8001958 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4aa3      	ldr	r2, [pc, #652]	; (800197c <HAL_GPIO_Init+0x2c4>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d05e      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 80016f4:	4aa1      	ldr	r2, [pc, #644]	; (800197c <HAL_GPIO_Init+0x2c4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d875      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 80016fa:	4aa1      	ldr	r2, [pc, #644]	; (8001980 <HAL_GPIO_Init+0x2c8>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d058      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 8001700:	4a9f      	ldr	r2, [pc, #636]	; (8001980 <HAL_GPIO_Init+0x2c8>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d86f      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 8001706:	4a9f      	ldr	r2, [pc, #636]	; (8001984 <HAL_GPIO_Init+0x2cc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d052      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 800170c:	4a9d      	ldr	r2, [pc, #628]	; (8001984 <HAL_GPIO_Init+0x2cc>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d869      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 8001712:	4a9d      	ldr	r2, [pc, #628]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d04c      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 8001718:	4a9b      	ldr	r2, [pc, #620]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d863      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 800171e:	4a9b      	ldr	r2, [pc, #620]	; (800198c <HAL_GPIO_Init+0x2d4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d046      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 8001724:	4a99      	ldr	r2, [pc, #612]	; (800198c <HAL_GPIO_Init+0x2d4>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d85d      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 800172a:	2b12      	cmp	r3, #18
 800172c:	d82a      	bhi.n	8001784 <HAL_GPIO_Init+0xcc>
 800172e:	2b12      	cmp	r3, #18
 8001730:	d859      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 8001732:	a201      	add	r2, pc, #4	; (adr r2, 8001738 <HAL_GPIO_Init+0x80>)
 8001734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001738:	080017b3 	.word	0x080017b3
 800173c:	0800178d 	.word	0x0800178d
 8001740:	0800179f 	.word	0x0800179f
 8001744:	080017e1 	.word	0x080017e1
 8001748:	080017e7 	.word	0x080017e7
 800174c:	080017e7 	.word	0x080017e7
 8001750:	080017e7 	.word	0x080017e7
 8001754:	080017e7 	.word	0x080017e7
 8001758:	080017e7 	.word	0x080017e7
 800175c:	080017e7 	.word	0x080017e7
 8001760:	080017e7 	.word	0x080017e7
 8001764:	080017e7 	.word	0x080017e7
 8001768:	080017e7 	.word	0x080017e7
 800176c:	080017e7 	.word	0x080017e7
 8001770:	080017e7 	.word	0x080017e7
 8001774:	080017e7 	.word	0x080017e7
 8001778:	080017e7 	.word	0x080017e7
 800177c:	08001795 	.word	0x08001795
 8001780:	080017a9 	.word	0x080017a9
 8001784:	4a82      	ldr	r2, [pc, #520]	; (8001990 <HAL_GPIO_Init+0x2d8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800178a:	e02c      	b.n	80017e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	623b      	str	r3, [r7, #32]
          break;
 8001792:	e029      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	3304      	adds	r3, #4
 800179a:	623b      	str	r3, [r7, #32]
          break;
 800179c:	e024      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	3308      	adds	r3, #8
 80017a4:	623b      	str	r3, [r7, #32]
          break;
 80017a6:	e01f      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	330c      	adds	r3, #12
 80017ae:	623b      	str	r3, [r7, #32]
          break;
 80017b0:	e01a      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ba:	2304      	movs	r3, #4
 80017bc:	623b      	str	r3, [r7, #32]
          break;
 80017be:	e013      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c8:	2308      	movs	r3, #8
 80017ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	611a      	str	r2, [r3, #16]
          break;
 80017d2:	e009      	b.n	80017e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d4:	2308      	movs	r3, #8
 80017d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	615a      	str	r2, [r3, #20]
          break;
 80017de:	e003      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
          break;
 80017e4:	e000      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          break;
 80017e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2bff      	cmp	r3, #255	; 0xff
 80017ec:	d801      	bhi.n	80017f2 <HAL_GPIO_Init+0x13a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	e001      	b.n	80017f6 <HAL_GPIO_Init+0x13e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3304      	adds	r3, #4
 80017f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	2bff      	cmp	r3, #255	; 0xff
 80017fc:	d802      	bhi.n	8001804 <HAL_GPIO_Init+0x14c>
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	e002      	b.n	800180a <HAL_GPIO_Init+0x152>
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	3b08      	subs	r3, #8
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	210f      	movs	r1, #15
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	401a      	ands	r2, r3
 800181c:	6a39      	ldr	r1, [r7, #32]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	431a      	orrs	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8090 	beq.w	8001958 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001838:	4b56      	ldr	r3, [pc, #344]	; (8001994 <HAL_GPIO_Init+0x2dc>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a55      	ldr	r2, [pc, #340]	; (8001994 <HAL_GPIO_Init+0x2dc>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <HAL_GPIO_Init+0x2dc>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001850:	4a51      	ldr	r2, [pc, #324]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	220f      	movs	r2, #15
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4013      	ands	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a49      	ldr	r2, [pc, #292]	; (800199c <HAL_GPIO_Init+0x2e4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d00d      	beq.n	8001898 <HAL_GPIO_Init+0x1e0>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a48      	ldr	r2, [pc, #288]	; (80019a0 <HAL_GPIO_Init+0x2e8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d007      	beq.n	8001894 <HAL_GPIO_Init+0x1dc>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a47      	ldr	r2, [pc, #284]	; (80019a4 <HAL_GPIO_Init+0x2ec>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d101      	bne.n	8001890 <HAL_GPIO_Init+0x1d8>
 800188c:	2302      	movs	r3, #2
 800188e:	e004      	b.n	800189a <HAL_GPIO_Init+0x1e2>
 8001890:	2303      	movs	r3, #3
 8001892:	e002      	b.n	800189a <HAL_GPIO_Init+0x1e2>
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <HAL_GPIO_Init+0x1e2>
 8001898:	2300      	movs	r3, #0
 800189a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189c:	f002 0203 	and.w	r2, r2, #3
 80018a0:	0092      	lsls	r2, r2, #2
 80018a2:	4093      	lsls	r3, r2
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018aa:	493b      	ldr	r1, [pc, #236]	; (8001998 <HAL_GPIO_Init+0x2e0>)
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3302      	adds	r3, #2
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018c4:	4b38      	ldr	r3, [pc, #224]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	4937      	ldr	r1, [pc, #220]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	608b      	str	r3, [r1, #8]
 80018d0:	e006      	b.n	80018e0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018d2:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	43db      	mvns	r3, r3
 80018da:	4933      	ldr	r1, [pc, #204]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 80018dc:	4013      	ands	r3, r2
 80018de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018ec:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	492d      	ldr	r1, [pc, #180]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	60cb      	str	r3, [r1, #12]
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018fa:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	43db      	mvns	r3, r3
 8001902:	4929      	ldr	r1, [pc, #164]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 8001904:	4013      	ands	r3, r2
 8001906:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001914:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4923      	ldr	r1, [pc, #140]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	43db      	mvns	r3, r3
 800192a:	491f      	ldr	r1, [pc, #124]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 800192c:	4013      	ands	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4919      	ldr	r1, [pc, #100]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]
 8001948:	e006      	b.n	8001958 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	43db      	mvns	r3, r3
 8001952:	4915      	ldr	r1, [pc, #84]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 8001954:	4013      	ands	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	3301      	adds	r3, #1
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	f47f aeaf 	bne.w	80016cc <HAL_GPIO_Init+0x14>
  }
}
 800196e:	bf00      	nop
 8001970:	bf00      	nop
 8001972:	372c      	adds	r7, #44	; 0x2c
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	10320000 	.word	0x10320000
 8001980:	10310000 	.word	0x10310000
 8001984:	10220000 	.word	0x10220000
 8001988:	10210000 	.word	0x10210000
 800198c:	10120000 	.word	0x10120000
 8001990:	10110000 	.word	0x10110000
 8001994:	40021000 	.word	0x40021000
 8001998:	40010000 	.word	0x40010000
 800199c:	40010800 	.word	0x40010800
 80019a0:	40010c00 	.word	0x40010c00
 80019a4:	40011000 	.word	0x40011000
 80019a8:	40010400 	.word	0x40010400

080019ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	e001      	b.n	80019ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	460b      	mov	r3, r1
 80019e4:	807b      	strh	r3, [r7, #2]
 80019e6:	4613      	mov	r3, r2
 80019e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ea:	787b      	ldrb	r3, [r7, #1]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f0:	887a      	ldrh	r2, [r7, #2]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019f6:	e003      	b.n	8001a00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	041a      	lsls	r2, r3, #16
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	611a      	str	r2, [r3, #16]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	460b      	mov	r3, r1
 8001a14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a1c:	887a      	ldrh	r2, [r7, #2]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4013      	ands	r3, r2
 8001a22:	041a      	lsls	r2, r3, #16
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	887b      	ldrh	r3, [r7, #2]
 8001a2a:	400b      	ands	r3, r1
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	611a      	str	r2, [r3, #16]
}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e26c      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 8087 	beq.w	8001b6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a5c:	4b92      	ldr	r3, [pc, #584]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d00c      	beq.n	8001a82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a68:	4b8f      	ldr	r3, [pc, #572]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d112      	bne.n	8001a9a <HAL_RCC_OscConfig+0x5e>
 8001a74:	4b8c      	ldr	r3, [pc, #560]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a80:	d10b      	bne.n	8001a9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a82:	4b89      	ldr	r3, [pc, #548]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d06c      	beq.n	8001b68 <HAL_RCC_OscConfig+0x12c>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d168      	bne.n	8001b68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e246      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x76>
 8001aa4:	4b80      	ldr	r3, [pc, #512]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a7f      	ldr	r2, [pc, #508]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	e02e      	b.n	8001b10 <HAL_RCC_OscConfig+0xd4>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x98>
 8001aba:	4b7b      	ldr	r3, [pc, #492]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a7a      	ldr	r2, [pc, #488]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b78      	ldr	r3, [pc, #480]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a77      	ldr	r2, [pc, #476]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e01d      	b.n	8001b10 <HAL_RCC_OscConfig+0xd4>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0xbc>
 8001ade:	4b72      	ldr	r3, [pc, #456]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a71      	ldr	r2, [pc, #452]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b6f      	ldr	r3, [pc, #444]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a6e      	ldr	r2, [pc, #440]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e00b      	b.n	8001b10 <HAL_RCC_OscConfig+0xd4>
 8001af8:	4b6b      	ldr	r3, [pc, #428]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a6a      	ldr	r2, [pc, #424]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b68      	ldr	r3, [pc, #416]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a67      	ldr	r2, [pc, #412]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d013      	beq.n	8001b40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b18:	f7ff fcb6 	bl	8001488 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff fcb2 	bl	8001488 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e1fa      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	4b5d      	ldr	r3, [pc, #372]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0xe4>
 8001b3e:	e014      	b.n	8001b6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fca2 	bl	8001488 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff fc9e 	bl	8001488 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e1e6      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5a:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x10c>
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d063      	beq.n	8001c3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b76:	4b4c      	ldr	r3, [pc, #304]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00b      	beq.n	8001b9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b82:	4b49      	ldr	r3, [pc, #292]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d11c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x18c>
 8001b8e:	4b46      	ldr	r3, [pc, #280]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d116      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9a:	4b43      	ldr	r3, [pc, #268]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d005      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x176>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d001      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e1ba      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb2:	4b3d      	ldr	r3, [pc, #244]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4939      	ldr	r1, [pc, #228]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc6:	e03a      	b.n	8001c3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d020      	beq.n	8001c12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd0:	4b36      	ldr	r3, [pc, #216]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fc57 	bl	8001488 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bde:	f7ff fc53 	bl	8001488 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e19b      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf0:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4927      	ldr	r1, [pc, #156]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]
 8001c10:	e015      	b.n	8001c3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c12:	4b26      	ldr	r3, [pc, #152]	; (8001cac <HAL_RCC_OscConfig+0x270>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7ff fc36 	bl	8001488 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c20:	f7ff fc32 	bl	8001488 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e17a      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c32:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d03a      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d019      	beq.n	8001c86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <HAL_RCC_OscConfig+0x274>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c58:	f7ff fc16 	bl	8001488 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c60:	f7ff fc12 	bl	8001488 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e15a      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f000 fa9a 	bl	80021b8 <RCC_Delay>
 8001c84:	e01c      	b.n	8001cc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_RCC_OscConfig+0x274>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8c:	f7ff fbfc 	bl	8001488 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c92:	e00f      	b.n	8001cb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c94:	f7ff fbf8 	bl	8001488 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d908      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e140      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	42420000 	.word	0x42420000
 8001cb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb4:	4b9e      	ldr	r3, [pc, #632]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1e9      	bne.n	8001c94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 80a6 	beq.w	8001e1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd2:	4b97      	ldr	r3, [pc, #604]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10d      	bne.n	8001cfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	4b94      	ldr	r3, [pc, #592]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4a93      	ldr	r2, [pc, #588]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	61d3      	str	r3, [r2, #28]
 8001cea:	4b91      	ldr	r3, [pc, #580]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfa:	4b8e      	ldr	r3, [pc, #568]	; (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d118      	bne.n	8001d38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d06:	4b8b      	ldr	r3, [pc, #556]	; (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a8a      	ldr	r2, [pc, #552]	; (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d12:	f7ff fbb9 	bl	8001488 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1a:	f7ff fbb5 	bl	8001488 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b64      	cmp	r3, #100	; 0x64
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e0fd      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2c:	4b81      	ldr	r3, [pc, #516]	; (8001f34 <HAL_RCC_OscConfig+0x4f8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d106      	bne.n	8001d4e <HAL_RCC_OscConfig+0x312>
 8001d40:	4b7b      	ldr	r3, [pc, #492]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	4a7a      	ldr	r2, [pc, #488]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6213      	str	r3, [r2, #32]
 8001d4c:	e02d      	b.n	8001daa <HAL_RCC_OscConfig+0x36e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x334>
 8001d56:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	4a75      	ldr	r2, [pc, #468]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6213      	str	r3, [r2, #32]
 8001d62:	4b73      	ldr	r3, [pc, #460]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4a72      	ldr	r2, [pc, #456]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	f023 0304 	bic.w	r3, r3, #4
 8001d6c:	6213      	str	r3, [r2, #32]
 8001d6e:	e01c      	b.n	8001daa <HAL_RCC_OscConfig+0x36e>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b05      	cmp	r3, #5
 8001d76:	d10c      	bne.n	8001d92 <HAL_RCC_OscConfig+0x356>
 8001d78:	4b6d      	ldr	r3, [pc, #436]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	4a6c      	ldr	r2, [pc, #432]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	6213      	str	r3, [r2, #32]
 8001d84:	4b6a      	ldr	r3, [pc, #424]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4a69      	ldr	r2, [pc, #420]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6213      	str	r3, [r2, #32]
 8001d90:	e00b      	b.n	8001daa <HAL_RCC_OscConfig+0x36e>
 8001d92:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4a66      	ldr	r2, [pc, #408]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	6213      	str	r3, [r2, #32]
 8001d9e:	4b64      	ldr	r3, [pc, #400]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	4a63      	ldr	r2, [pc, #396]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	f023 0304 	bic.w	r3, r3, #4
 8001da8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d015      	beq.n	8001dde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db2:	f7ff fb69 	bl	8001488 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dba:	f7ff fb65 	bl	8001488 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e0ab      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd0:	4b57      	ldr	r3, [pc, #348]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0ee      	beq.n	8001dba <HAL_RCC_OscConfig+0x37e>
 8001ddc:	e014      	b.n	8001e08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dde:	f7ff fb53 	bl	8001488 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7ff fb4f 	bl	8001488 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e095      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfc:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1ee      	bne.n	8001de6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d105      	bne.n	8001e1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0e:	4b48      	ldr	r3, [pc, #288]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	4a47      	ldr	r2, [pc, #284]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 8081 	beq.w	8001f26 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e24:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d061      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d146      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e38:	4b3f      	ldr	r3, [pc, #252]	; (8001f38 <HAL_RCC_OscConfig+0x4fc>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7ff fb23 	bl	8001488 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e46:	f7ff fb1f 	bl	8001488 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e067      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e58:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f0      	bne.n	8001e46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6c:	d108      	bne.n	8001e80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e6e:	4b30      	ldr	r3, [pc, #192]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	492d      	ldr	r1, [pc, #180]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e80:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a19      	ldr	r1, [r3, #32]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	430b      	orrs	r3, r1
 8001e92:	4927      	ldr	r1, [pc, #156]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e98:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <HAL_RCC_OscConfig+0x4fc>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7ff faf3 	bl	8001488 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea6:	f7ff faef 	bl	8001488 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e037      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x46a>
 8001ec4:	e02f      	b.n	8001f26 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HAL_RCC_OscConfig+0x4fc>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fadc 	bl	8001488 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7ff fad8 	bl	8001488 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e020      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x498>
 8001ef2:	e018      	b.n	8001f26 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e013      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d106      	bne.n	8001f22 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d001      	beq.n	8001f26 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40007000 	.word	0x40007000
 8001f38:	42420060 	.word	0x42420060

08001f3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0d0      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f50:	4b6a      	ldr	r3, [pc, #424]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d910      	bls.n	8001f80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 0207 	bic.w	r2, r3, #7
 8001f66:	4965      	ldr	r1, [pc, #404]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b63      	ldr	r3, [pc, #396]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0b8      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f98:	4b59      	ldr	r3, [pc, #356]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4a58      	ldr	r2, [pc, #352]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fa2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb0:	4b53      	ldr	r3, [pc, #332]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	4a52      	ldr	r2, [pc, #328]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fbc:	4b50      	ldr	r3, [pc, #320]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	494d      	ldr	r1, [pc, #308]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d040      	beq.n	800205c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d107      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d115      	bne.n	800201a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e07f      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d107      	bne.n	800200a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffa:	4b41      	ldr	r3, [pc, #260]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e073      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200a:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e06b      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201a:	4b39      	ldr	r3, [pc, #228]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f023 0203 	bic.w	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4936      	ldr	r1, [pc, #216]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800202c:	f7ff fa2c 	bl	8001488 <HAL_GetTick>
 8002030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002032:	e00a      	b.n	800204a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002034:	f7ff fa28 	bl	8001488 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e053      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 020c 	and.w	r2, r3, #12
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	429a      	cmp	r2, r3
 800205a:	d1eb      	bne.n	8002034 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800205c:	4b27      	ldr	r3, [pc, #156]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d210      	bcs.n	800208c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 0207 	bic.w	r2, r3, #7
 8002072:	4922      	ldr	r1, [pc, #136]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e032      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4916      	ldr	r1, [pc, #88]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	490e      	ldr	r1, [pc, #56]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ca:	f000 f821 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 80020ce:	4602      	mov	r2, r0
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	490a      	ldr	r1, [pc, #40]	; (8002104 <HAL_RCC_ClockConfig+0x1c8>)
 80020dc:	5ccb      	ldrb	r3, [r1, r3]
 80020de:	fa22 f303 	lsr.w	r3, r2, r3
 80020e2:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_RCC_ClockConfig+0x1cc>)
 80020e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_RCC_ClockConfig+0x1d0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff f98a 	bl	8001404 <HAL_InitTick>

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40022000 	.word	0x40022000
 8002100:	40021000 	.word	0x40021000
 8002104:	08002a34 	.word	0x08002a34
 8002108:	20000034 	.word	0x20000034
 800210c:	20000038 	.word	0x20000038

08002110 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800212a:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b04      	cmp	r3, #4
 8002138:	d002      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x30>
 800213a:	2b08      	cmp	r3, #8
 800213c:	d003      	beq.n	8002146 <HAL_RCC_GetSysClockFreq+0x36>
 800213e:	e027      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002142:	613b      	str	r3, [r7, #16]
      break;
 8002144:	e027      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	0c9b      	lsrs	r3, r3, #18
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	4a17      	ldr	r2, [pc, #92]	; (80021ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002150:	5cd3      	ldrb	r3, [r2, r3]
 8002152:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d010      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	0c5b      	lsrs	r3, r3, #17
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	4a11      	ldr	r2, [pc, #68]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800216a:	5cd3      	ldrb	r3, [r2, r3]
 800216c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002172:	fb02 f203 	mul.w	r2, r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e004      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002184:	fb02 f303 	mul.w	r3, r2, r3
 8002188:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	613b      	str	r3, [r7, #16]
      break;
 800218e:	e002      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002192:	613b      	str	r3, [r7, #16]
      break;
 8002194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002196:	693b      	ldr	r3, [r7, #16]
}
 8002198:	4618      	mov	r0, r3
 800219a:	371c      	adds	r7, #28
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	007a1200 	.word	0x007a1200
 80021ac:	08002a44 	.word	0x08002a44
 80021b0:	08002a54 	.word	0x08002a54
 80021b4:	003d0900 	.word	0x003d0900

080021b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <RCC_Delay+0x34>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <RCC_Delay+0x38>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0a5b      	lsrs	r3, r3, #9
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021d4:	bf00      	nop
  }
  while (Delay --);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1e5a      	subs	r2, r3, #1
 80021da:	60fa      	str	r2, [r7, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f9      	bne.n	80021d4 <RCC_Delay+0x1c>
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	20000034 	.word	0x20000034
 80021f0:	10624dd3 	.word	0x10624dd3

080021f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e041      	b.n	800228a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff f85a 	bl	80012d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3304      	adds	r3, #4
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f000 fa6e 	bl	8002714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d001      	beq.n	80022ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e035      	b.n	8002318 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a16      	ldr	r2, [pc, #88]	; (8002324 <HAL_TIM_Base_Start_IT+0x90>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d009      	beq.n	80022e2 <HAL_TIM_Base_Start_IT+0x4e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d6:	d004      	beq.n	80022e2 <HAL_TIM_Base_Start_IT+0x4e>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a12      	ldr	r2, [pc, #72]	; (8002328 <HAL_TIM_Base_Start_IT+0x94>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d111      	bne.n	8002306 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b06      	cmp	r3, #6
 80022f2:	d010      	beq.n	8002316 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002304:	e007      	b.n	8002316 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0201 	orr.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40000400 	.word	0x40000400

0800232c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b02      	cmp	r3, #2
 8002340:	d122      	bne.n	8002388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b02      	cmp	r3, #2
 800234e:	d11b      	bne.n	8002388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0202 	mvn.w	r2, #2
 8002358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f9b4 	bl	80026dc <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f9a7 	bl	80026ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f9b6 	bl	80026ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	2b04      	cmp	r3, #4
 8002394:	d122      	bne.n	80023dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d11b      	bne.n	80023dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0204 	mvn.w	r2, #4
 80023ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2202      	movs	r2, #2
 80023b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f98a 	bl	80026dc <HAL_TIM_IC_CaptureCallback>
 80023c8:	e005      	b.n	80023d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f97d 	bl	80026ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f98c 	bl	80026ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d122      	bne.n	8002430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d11b      	bne.n	8002430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0208 	mvn.w	r2, #8
 8002400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2204      	movs	r2, #4
 8002406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f960 	bl	80026dc <HAL_TIM_IC_CaptureCallback>
 800241c:	e005      	b.n	800242a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f953 	bl	80026ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f962 	bl	80026ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b10      	cmp	r3, #16
 800243c:	d122      	bne.n	8002484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b10      	cmp	r3, #16
 800244a:	d11b      	bne.n	8002484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0210 	mvn.w	r2, #16
 8002454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2208      	movs	r2, #8
 800245a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f936 	bl	80026dc <HAL_TIM_IC_CaptureCallback>
 8002470:	e005      	b.n	800247e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f929 	bl	80026ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f938 	bl	80026ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b01      	cmp	r3, #1
 8002490:	d10e      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d107      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0201 	mvn.w	r2, #1
 80024a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe fe2e 	bl	800110c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ba:	2b80      	cmp	r3, #128	; 0x80
 80024bc:	d10e      	bne.n	80024dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c8:	2b80      	cmp	r3, #128	; 0x80
 80024ca:	d107      	bne.n	80024dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fa6b 	bl	80029b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e6:	2b40      	cmp	r3, #64	; 0x40
 80024e8:	d10e      	bne.n	8002508 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f4:	2b40      	cmp	r3, #64	; 0x40
 80024f6:	d107      	bne.n	8002508 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f8fc 	bl	8002700 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	2b20      	cmp	r3, #32
 8002514:	d10e      	bne.n	8002534 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b20      	cmp	r3, #32
 8002522:	d107      	bne.n	8002534 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0220 	mvn.w	r2, #32
 800252c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fa36 	bl	80029a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_TIM_ConfigClockSource+0x1c>
 8002554:	2302      	movs	r3, #2
 8002556:	e0b4      	b.n	80026c2 <HAL_TIM_ConfigClockSource+0x186>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800257e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002590:	d03e      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0xd4>
 8002592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002596:	f200 8087 	bhi.w	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 800259a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800259e:	f000 8086 	beq.w	80026ae <HAL_TIM_ConfigClockSource+0x172>
 80025a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a6:	d87f      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025a8:	2b70      	cmp	r3, #112	; 0x70
 80025aa:	d01a      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0xa6>
 80025ac:	2b70      	cmp	r3, #112	; 0x70
 80025ae:	d87b      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025b0:	2b60      	cmp	r3, #96	; 0x60
 80025b2:	d050      	beq.n	8002656 <HAL_TIM_ConfigClockSource+0x11a>
 80025b4:	2b60      	cmp	r3, #96	; 0x60
 80025b6:	d877      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025b8:	2b50      	cmp	r3, #80	; 0x50
 80025ba:	d03c      	beq.n	8002636 <HAL_TIM_ConfigClockSource+0xfa>
 80025bc:	2b50      	cmp	r3, #80	; 0x50
 80025be:	d873      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d058      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x13a>
 80025c4:	2b40      	cmp	r3, #64	; 0x40
 80025c6:	d86f      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025c8:	2b30      	cmp	r3, #48	; 0x30
 80025ca:	d064      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x15a>
 80025cc:	2b30      	cmp	r3, #48	; 0x30
 80025ce:	d86b      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d060      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x15a>
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d867      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d05c      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x15a>
 80025dc:	2b10      	cmp	r3, #16
 80025de:	d05a      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x15a>
 80025e0:	e062      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6899      	ldr	r1, [r3, #8]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f000 f95e 	bl	80028b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	609a      	str	r2, [r3, #8]
      break;
 800260e:	e04f      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6899      	ldr	r1, [r3, #8]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f000 f947 	bl	80028b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002632:	609a      	str	r2, [r3, #8]
      break;
 8002634:	e03c      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	6859      	ldr	r1, [r3, #4]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	461a      	mov	r2, r3
 8002644:	f000 f8be 	bl	80027c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2150      	movs	r1, #80	; 0x50
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f915 	bl	800287e <TIM_ITRx_SetConfig>
      break;
 8002654:	e02c      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6859      	ldr	r1, [r3, #4]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	461a      	mov	r2, r3
 8002664:	f000 f8dc 	bl	8002820 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2160      	movs	r1, #96	; 0x60
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f905 	bl	800287e <TIM_ITRx_SetConfig>
      break;
 8002674:	e01c      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	461a      	mov	r2, r3
 8002684:	f000 f89e 	bl	80027c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2140      	movs	r1, #64	; 0x40
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f8f5 	bl	800287e <TIM_ITRx_SetConfig>
      break;
 8002694:	e00c      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4619      	mov	r1, r3
 80026a0:	4610      	mov	r0, r2
 80026a2:	f000 f8ec 	bl	800287e <TIM_ITRx_SetConfig>
      break;
 80026a6:	e003      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
      break;
 80026ac:	e000      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
	...

08002714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a25      	ldr	r2, [pc, #148]	; (80027bc <TIM_Base_SetConfig+0xa8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d007      	beq.n	800273c <TIM_Base_SetConfig+0x28>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002732:	d003      	beq.n	800273c <TIM_Base_SetConfig+0x28>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a22      	ldr	r2, [pc, #136]	; (80027c0 <TIM_Base_SetConfig+0xac>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d108      	bne.n	800274e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a1a      	ldr	r2, [pc, #104]	; (80027bc <TIM_Base_SetConfig+0xa8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d007      	beq.n	8002766 <TIM_Base_SetConfig+0x52>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275c:	d003      	beq.n	8002766 <TIM_Base_SetConfig+0x52>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <TIM_Base_SetConfig+0xac>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d108      	bne.n	8002778 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800276c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4313      	orrs	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a07      	ldr	r2, [pc, #28]	; (80027bc <TIM_Base_SetConfig+0xa8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d103      	bne.n	80027ac <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	615a      	str	r2, [r3, #20]
}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	40012c00 	.word	0x40012c00
 80027c0:	40000400 	.word	0x40000400

080027c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	f023 0201 	bic.w	r2, r3, #1
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f023 030a 	bic.w	r3, r3, #10
 8002800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	621a      	str	r2, [r3, #32]
}
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	f023 0210 	bic.w	r2, r3, #16
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800284a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	031b      	lsls	r3, r3, #12
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800285c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	621a      	str	r2, [r3, #32]
}
 8002874:	bf00      	nop
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800287e:	b480      	push	{r7}
 8002880:	b085      	sub	sp, #20
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	f043 0307 	orr.w	r3, r3, #7
 80028a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	609a      	str	r2, [r3, #8]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b087      	sub	sp, #28
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	021a      	lsls	r2, r3, #8
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	431a      	orrs	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4313      	orrs	r3, r2
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	609a      	str	r2, [r3, #8]
}
 80028e6:	bf00      	nop
 80028e8:	371c      	adds	r7, #28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002904:	2302      	movs	r3, #2
 8002906:	e041      	b.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a14      	ldr	r2, [pc, #80]	; (8002998 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d009      	beq.n	8002960 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002954:	d004      	beq.n	8002960 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a10      	ldr	r2, [pc, #64]	; (800299c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d10c      	bne.n	800297a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002966:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	4313      	orrs	r3, r2
 8002970:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40012c00 	.word	0x40012c00
 800299c:	40000400 	.word	0x40000400

080029a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <__libc_init_array>:
 80029c4:	b570      	push	{r4, r5, r6, lr}
 80029c6:	2600      	movs	r6, #0
 80029c8:	4d0c      	ldr	r5, [pc, #48]	; (80029fc <__libc_init_array+0x38>)
 80029ca:	4c0d      	ldr	r4, [pc, #52]	; (8002a00 <__libc_init_array+0x3c>)
 80029cc:	1b64      	subs	r4, r4, r5
 80029ce:	10a4      	asrs	r4, r4, #2
 80029d0:	42a6      	cmp	r6, r4
 80029d2:	d109      	bne.n	80029e8 <__libc_init_array+0x24>
 80029d4:	f000 f822 	bl	8002a1c <_init>
 80029d8:	2600      	movs	r6, #0
 80029da:	4d0a      	ldr	r5, [pc, #40]	; (8002a04 <__libc_init_array+0x40>)
 80029dc:	4c0a      	ldr	r4, [pc, #40]	; (8002a08 <__libc_init_array+0x44>)
 80029de:	1b64      	subs	r4, r4, r5
 80029e0:	10a4      	asrs	r4, r4, #2
 80029e2:	42a6      	cmp	r6, r4
 80029e4:	d105      	bne.n	80029f2 <__libc_init_array+0x2e>
 80029e6:	bd70      	pop	{r4, r5, r6, pc}
 80029e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ec:	4798      	blx	r3
 80029ee:	3601      	adds	r6, #1
 80029f0:	e7ee      	b.n	80029d0 <__libc_init_array+0xc>
 80029f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029f6:	4798      	blx	r3
 80029f8:	3601      	adds	r6, #1
 80029fa:	e7f2      	b.n	80029e2 <__libc_init_array+0x1e>
 80029fc:	08002a58 	.word	0x08002a58
 8002a00:	08002a58 	.word	0x08002a58
 8002a04:	08002a58 	.word	0x08002a58
 8002a08:	08002a5c 	.word	0x08002a5c

08002a0c <memset>:
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4402      	add	r2, r0
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d100      	bne.n	8002a16 <memset+0xa>
 8002a14:	4770      	bx	lr
 8002a16:	f803 1b01 	strb.w	r1, [r3], #1
 8002a1a:	e7f9      	b.n	8002a10 <memset+0x4>

08002a1c <_init>:
 8002a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1e:	bf00      	nop
 8002a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a22:	bc08      	pop	{r3}
 8002a24:	469e      	mov	lr, r3
 8002a26:	4770      	bx	lr

08002a28 <_fini>:
 8002a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2a:	bf00      	nop
 8002a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a2e:	bc08      	pop	{r3}
 8002a30:	469e      	mov	lr, r3
 8002a32:	4770      	bx	lr
