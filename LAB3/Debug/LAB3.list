
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002744  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002850  08002850  00012850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002874  08002874  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08002874  08002874  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002874  08002874  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002874  08002874  00012874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002878  08002878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  0800287c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000040  080028bc  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080028bc  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ebd  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dfd  00000000  00000000  00029f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002bd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002c7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001710c  00000000  00000000  0002d168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c74f  00000000  00000000  00044274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082505  00000000  00000000  000509c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2ec8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c4  00000000  00000000  000d2f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002838 	.word	0x08002838

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002838 	.word	0x08002838

0800014c <subKeyProcess>:
    KeyReg3[i] = NORMAL_STATE;
    TimeOutForKeyPress[i] = 500;
    flag[i] = 0;
  }
}
void subKeyProcess(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  flag[index] = 1;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <subKeyProcess+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	200000a0 	.word	0x200000a0

0800016c <isButtonPressed>:

int isButtonPressed(int index){
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
  if(flag[index] == 1) {
 8000174:	4a09      	ldr	r2, [pc, #36]	; (800019c <isButtonPressed+0x30>)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d106      	bne.n	800018e <isButtonPressed+0x22>
    flag[index] = 0;
 8000180:	4a06      	ldr	r2, [pc, #24]	; (800019c <isButtonPressed+0x30>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return 1;
 800018a:	2301      	movs	r3, #1
 800018c:	e000      	b.n	8000190 <isButtonPressed+0x24>
  }
  return 0;
 800018e:	2300      	movs	r3, #0
}
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	200000a0 	.word	0x200000a0

080001a0 <getKeyInput>:

void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
  for(int i = 0; i < NUMBER_OF_BUTTONS; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e071      	b.n	8000290 <getKeyInput+0xf0>
    KeyReg0[i] = KeyReg1[i];
 80001ac:	4a3c      	ldr	r2, [pc, #240]	; (80002a0 <getKeyInput+0x100>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493b      	ldr	r1, [pc, #236]	; (80002a4 <getKeyInput+0x104>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    KeyReg1[i] = KeyReg2[i];
 80001bc:	4a3a      	ldr	r2, [pc, #232]	; (80002a8 <getKeyInput+0x108>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4936      	ldr	r1, [pc, #216]	; (80002a0 <getKeyInput+0x100>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    KeyReg2[i] = HAL_GPIO_ReadPin(gpio_port[i], gpio_pin[i]);
 80001cc:	4a37      	ldr	r2, [pc, #220]	; (80002ac <getKeyInput+0x10c>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4936      	ldr	r1, [pc, #216]	; (80002b0 <getKeyInput+0x110>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001dc:	4619      	mov	r1, r3
 80001de:	4610      	mov	r0, r2
 80001e0:	f001 fb0a 	bl	80017f8 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a2f      	ldr	r2, [pc, #188]	; (80002a8 <getKeyInput+0x108>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001f0:	4a2b      	ldr	r2, [pc, #172]	; (80002a0 <getKeyInput+0x100>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	492a      	ldr	r1, [pc, #168]	; (80002a4 <getKeyInput+0x104>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d142      	bne.n	800028a <getKeyInput+0xea>
 8000204:	4a26      	ldr	r2, [pc, #152]	; (80002a0 <getKeyInput+0x100>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4926      	ldr	r1, [pc, #152]	; (80002a8 <getKeyInput+0x108>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d138      	bne.n	800028a <getKeyInput+0xea>
      if (KeyReg3[i] != KeyReg2[i]){
 8000218:	4a26      	ldr	r2, [pc, #152]	; (80002b4 <getKeyInput+0x114>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4921      	ldr	r1, [pc, #132]	; (80002a8 <getKeyInput+0x108>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d011      	beq.n	8000250 <getKeyInput+0xb0>
        KeyReg3[i] = KeyReg2[i];
 800022c:	4a1e      	ldr	r2, [pc, #120]	; (80002a8 <getKeyInput+0x108>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	491f      	ldr	r1, [pc, #124]	; (80002b4 <getKeyInput+0x114>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (KeyReg2[i] == PRESSED_STATE) {
 800023c:	4a1a      	ldr	r2, [pc, #104]	; (80002a8 <getKeyInput+0x108>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d120      	bne.n	800028a <getKeyInput+0xea>
          subKeyProcess(i);
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f7ff ff7f 	bl	800014c <subKeyProcess>
 800024e:	e01c      	b.n	800028a <getKeyInput+0xea>
        }
      } else {
        TimeOutForKeyPress[i]--;
 8000250:	4a19      	ldr	r2, [pc, #100]	; (80002b8 <getKeyInput+0x118>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000258:	1e5a      	subs	r2, r3, #1
 800025a:	4917      	ldr	r1, [pc, #92]	; (80002b8 <getKeyInput+0x118>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (TimeOutForKeyPress[i] == 0){
 8000262:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <getKeyInput+0x118>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d10d      	bne.n	800028a <getKeyInput+0xea>
          TimeOutForKeyPress[i] = 200;
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <getKeyInput+0x118>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	21c8      	movs	r1, #200	; 0xc8
 8000274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          if (KeyReg2[i] == PRESSED_STATE){
 8000278:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <getKeyInput+0x108>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d102      	bne.n	800028a <getKeyInput+0xea>
            subKeyProcess(i);
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	f7ff ff61 	bl	800014c <subKeyProcess>
  for(int i = 0; i < NUMBER_OF_BUTTONS; i++) {
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	3301      	adds	r3, #1
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b02      	cmp	r3, #2
 8000294:	dd8a      	ble.n	80001ac <getKeyInput+0xc>
          }
        }
      }
    }
  }
}
 8000296:	bf00      	nop
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000004 	.word	0x20000004
 80002a4:	20000000 	.word	0x20000000
 80002a8:	20000008 	.word	0x20000008
 80002ac:	20000018 	.word	0x20000018
 80002b0:	20000010 	.word	0x20000010
 80002b4:	2000000c 	.word	0x2000000c
 80002b8:	200000ac 	.word	0x200000ac

080002bc <set_display7SEG>:
		GPIO_TypeDef* c_seg_GPIO_Port, uint16_t c_seg_Pin,
		GPIO_TypeDef* d_seg_GPIO_Port, uint16_t d_seg_Pin,
		GPIO_TypeDef* e_seg_GPIO_Port, uint16_t e_seg_Pin,
		GPIO_TypeDef* f_seg_GPIO_Port, uint16_t f_seg_Pin,
		GPIO_TypeDef* g_seg_GPIO_Port, uint16_t g_seg_Pin)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	603b      	str	r3, [r7, #0]
 80002c8:	4613      	mov	r3, r2
 80002ca:	80fb      	strh	r3, [r7, #6]
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2b09      	cmp	r3, #9
 80002d0:	f200 81d0 	bhi.w	8000674 <set_display7SEG+0x3b8>
 80002d4:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <set_display7SEG+0x20>)
 80002d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002da:	bf00      	nop
 80002dc:	08000305 	.word	0x08000305
 80002e0:	0800035d 	.word	0x0800035d
 80002e4:	080003b5 	.word	0x080003b5
 80002e8:	0800040d 	.word	0x0800040d
 80002ec:	08000465 	.word	0x08000465
 80002f0:	080004bd 	.word	0x080004bd
 80002f4:	08000515 	.word	0x08000515
 80002f8:	0800056d 	.word	0x0800056d
 80002fc:	080005c5 	.word	0x080005c5
 8000300:	0800061d 	.word	0x0800061d
	switch(counter){
		case 0:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, RESET);
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	2200      	movs	r2, #0
 8000308:	4619      	mov	r1, r3
 800030a:	68b8      	ldr	r0, [r7, #8]
 800030c:	f001 fa8b 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, RESET);
 8000310:	8b3b      	ldrh	r3, [r7, #24]
 8000312:	2200      	movs	r2, #0
 8000314:	4619      	mov	r1, r3
 8000316:	6838      	ldr	r0, [r7, #0]
 8000318:	f001 fa85 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, RESET);
 800031c:	8c3b      	ldrh	r3, [r7, #32]
 800031e:	2200      	movs	r2, #0
 8000320:	4619      	mov	r1, r3
 8000322:	69f8      	ldr	r0, [r7, #28]
 8000324:	f001 fa7f 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, RESET);
 8000328:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800032a:	2200      	movs	r2, #0
 800032c:	4619      	mov	r1, r3
 800032e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000330:	f001 fa79 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, RESET);
 8000334:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000336:	2200      	movs	r2, #0
 8000338:	4619      	mov	r1, r3
 800033a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800033c:	f001 fa73 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, RESET);
 8000340:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000342:	2200      	movs	r2, #0
 8000344:	4619      	mov	r1, r3
 8000346:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000348:	f001 fa6d 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, SET);
 800034c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000350:	2201      	movs	r2, #1
 8000352:	4619      	mov	r1, r3
 8000354:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000356:	f001 fa66 	bl	8001826 <HAL_GPIO_WritePin>
			break;
 800035a:	e18c      	b.n	8000676 <set_display7SEG+0x3ba>
		case 1:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, SET);
 800035c:	88fb      	ldrh	r3, [r7, #6]
 800035e:	2201      	movs	r2, #1
 8000360:	4619      	mov	r1, r3
 8000362:	68b8      	ldr	r0, [r7, #8]
 8000364:	f001 fa5f 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, RESET);
 8000368:	8b3b      	ldrh	r3, [r7, #24]
 800036a:	2200      	movs	r2, #0
 800036c:	4619      	mov	r1, r3
 800036e:	6838      	ldr	r0, [r7, #0]
 8000370:	f001 fa59 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, RESET);
 8000374:	8c3b      	ldrh	r3, [r7, #32]
 8000376:	2200      	movs	r2, #0
 8000378:	4619      	mov	r1, r3
 800037a:	69f8      	ldr	r0, [r7, #28]
 800037c:	f001 fa53 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, SET);
 8000380:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000382:	2201      	movs	r2, #1
 8000384:	4619      	mov	r1, r3
 8000386:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000388:	f001 fa4d 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, SET);
 800038c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800038e:	2201      	movs	r2, #1
 8000390:	4619      	mov	r1, r3
 8000392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000394:	f001 fa47 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, SET);
 8000398:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800039a:	2201      	movs	r2, #1
 800039c:	4619      	mov	r1, r3
 800039e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80003a0:	f001 fa41 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, SET);
 80003a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80003a8:	2201      	movs	r2, #1
 80003aa:	4619      	mov	r1, r3
 80003ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80003ae:	f001 fa3a 	bl	8001826 <HAL_GPIO_WritePin>
			break;
 80003b2:	e160      	b.n	8000676 <set_display7SEG+0x3ba>
		case 2:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, RESET);
 80003b4:	88fb      	ldrh	r3, [r7, #6]
 80003b6:	2200      	movs	r2, #0
 80003b8:	4619      	mov	r1, r3
 80003ba:	68b8      	ldr	r0, [r7, #8]
 80003bc:	f001 fa33 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, RESET);
 80003c0:	8b3b      	ldrh	r3, [r7, #24]
 80003c2:	2200      	movs	r2, #0
 80003c4:	4619      	mov	r1, r3
 80003c6:	6838      	ldr	r0, [r7, #0]
 80003c8:	f001 fa2d 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, SET);
 80003cc:	8c3b      	ldrh	r3, [r7, #32]
 80003ce:	2201      	movs	r2, #1
 80003d0:	4619      	mov	r1, r3
 80003d2:	69f8      	ldr	r0, [r7, #28]
 80003d4:	f001 fa27 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, RESET);
 80003d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80003da:	2200      	movs	r2, #0
 80003dc:	4619      	mov	r1, r3
 80003de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80003e0:	f001 fa21 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, RESET);
 80003e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80003e6:	2200      	movs	r2, #0
 80003e8:	4619      	mov	r1, r3
 80003ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80003ec:	f001 fa1b 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, SET);
 80003f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80003f2:	2201      	movs	r2, #1
 80003f4:	4619      	mov	r1, r3
 80003f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80003f8:	f001 fa15 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, RESET);
 80003fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000400:	2200      	movs	r2, #0
 8000402:	4619      	mov	r1, r3
 8000404:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000406:	f001 fa0e 	bl	8001826 <HAL_GPIO_WritePin>
			break;
 800040a:	e134      	b.n	8000676 <set_display7SEG+0x3ba>
		case 3:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, RESET);
 800040c:	88fb      	ldrh	r3, [r7, #6]
 800040e:	2200      	movs	r2, #0
 8000410:	4619      	mov	r1, r3
 8000412:	68b8      	ldr	r0, [r7, #8]
 8000414:	f001 fa07 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, RESET);
 8000418:	8b3b      	ldrh	r3, [r7, #24]
 800041a:	2200      	movs	r2, #0
 800041c:	4619      	mov	r1, r3
 800041e:	6838      	ldr	r0, [r7, #0]
 8000420:	f001 fa01 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, RESET);
 8000424:	8c3b      	ldrh	r3, [r7, #32]
 8000426:	2200      	movs	r2, #0
 8000428:	4619      	mov	r1, r3
 800042a:	69f8      	ldr	r0, [r7, #28]
 800042c:	f001 f9fb 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, RESET);
 8000430:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000432:	2200      	movs	r2, #0
 8000434:	4619      	mov	r1, r3
 8000436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000438:	f001 f9f5 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, SET);
 800043c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800043e:	2201      	movs	r2, #1
 8000440:	4619      	mov	r1, r3
 8000442:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000444:	f001 f9ef 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, SET);
 8000448:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800044a:	2201      	movs	r2, #1
 800044c:	4619      	mov	r1, r3
 800044e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000450:	f001 f9e9 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, RESET);
 8000454:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000458:	2200      	movs	r2, #0
 800045a:	4619      	mov	r1, r3
 800045c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800045e:	f001 f9e2 	bl	8001826 <HAL_GPIO_WritePin>
			break;
 8000462:	e108      	b.n	8000676 <set_display7SEG+0x3ba>
		case 4:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, SET);
 8000464:	88fb      	ldrh	r3, [r7, #6]
 8000466:	2201      	movs	r2, #1
 8000468:	4619      	mov	r1, r3
 800046a:	68b8      	ldr	r0, [r7, #8]
 800046c:	f001 f9db 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, RESET);
 8000470:	8b3b      	ldrh	r3, [r7, #24]
 8000472:	2200      	movs	r2, #0
 8000474:	4619      	mov	r1, r3
 8000476:	6838      	ldr	r0, [r7, #0]
 8000478:	f001 f9d5 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, RESET);
 800047c:	8c3b      	ldrh	r3, [r7, #32]
 800047e:	2200      	movs	r2, #0
 8000480:	4619      	mov	r1, r3
 8000482:	69f8      	ldr	r0, [r7, #28]
 8000484:	f001 f9cf 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, SET);
 8000488:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800048a:	2201      	movs	r2, #1
 800048c:	4619      	mov	r1, r3
 800048e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000490:	f001 f9c9 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, SET);
 8000494:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000496:	2201      	movs	r2, #1
 8000498:	4619      	mov	r1, r3
 800049a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800049c:	f001 f9c3 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, RESET);
 80004a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80004a2:	2200      	movs	r2, #0
 80004a4:	4619      	mov	r1, r3
 80004a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80004a8:	f001 f9bd 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, RESET);
 80004ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80004b0:	2200      	movs	r2, #0
 80004b2:	4619      	mov	r1, r3
 80004b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80004b6:	f001 f9b6 	bl	8001826 <HAL_GPIO_WritePin>
			break;
 80004ba:	e0dc      	b.n	8000676 <set_display7SEG+0x3ba>
		case 5:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, RESET);
 80004bc:	88fb      	ldrh	r3, [r7, #6]
 80004be:	2200      	movs	r2, #0
 80004c0:	4619      	mov	r1, r3
 80004c2:	68b8      	ldr	r0, [r7, #8]
 80004c4:	f001 f9af 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, SET);
 80004c8:	8b3b      	ldrh	r3, [r7, #24]
 80004ca:	2201      	movs	r2, #1
 80004cc:	4619      	mov	r1, r3
 80004ce:	6838      	ldr	r0, [r7, #0]
 80004d0:	f001 f9a9 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, RESET);
 80004d4:	8c3b      	ldrh	r3, [r7, #32]
 80004d6:	2200      	movs	r2, #0
 80004d8:	4619      	mov	r1, r3
 80004da:	69f8      	ldr	r0, [r7, #28]
 80004dc:	f001 f9a3 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, RESET);
 80004e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80004e2:	2200      	movs	r2, #0
 80004e4:	4619      	mov	r1, r3
 80004e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80004e8:	f001 f99d 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, SET);
 80004ec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80004ee:	2201      	movs	r2, #1
 80004f0:	4619      	mov	r1, r3
 80004f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80004f4:	f001 f997 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, RESET);
 80004f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80004fa:	2200      	movs	r2, #0
 80004fc:	4619      	mov	r1, r3
 80004fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000500:	f001 f991 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, RESET);
 8000504:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000508:	2200      	movs	r2, #0
 800050a:	4619      	mov	r1, r3
 800050c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800050e:	f001 f98a 	bl	8001826 <HAL_GPIO_WritePin>
			break;
 8000512:	e0b0      	b.n	8000676 <set_display7SEG+0x3ba>
		case 6:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, RESET);
 8000514:	88fb      	ldrh	r3, [r7, #6]
 8000516:	2200      	movs	r2, #0
 8000518:	4619      	mov	r1, r3
 800051a:	68b8      	ldr	r0, [r7, #8]
 800051c:	f001 f983 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, SET);
 8000520:	8b3b      	ldrh	r3, [r7, #24]
 8000522:	2201      	movs	r2, #1
 8000524:	4619      	mov	r1, r3
 8000526:	6838      	ldr	r0, [r7, #0]
 8000528:	f001 f97d 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, RESET);
 800052c:	8c3b      	ldrh	r3, [r7, #32]
 800052e:	2200      	movs	r2, #0
 8000530:	4619      	mov	r1, r3
 8000532:	69f8      	ldr	r0, [r7, #28]
 8000534:	f001 f977 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, RESET);
 8000538:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800053a:	2200      	movs	r2, #0
 800053c:	4619      	mov	r1, r3
 800053e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000540:	f001 f971 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, RESET);
 8000544:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000546:	2200      	movs	r2, #0
 8000548:	4619      	mov	r1, r3
 800054a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800054c:	f001 f96b 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, RESET);
 8000550:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000552:	2200      	movs	r2, #0
 8000554:	4619      	mov	r1, r3
 8000556:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000558:	f001 f965 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, RESET);
 800055c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000560:	2200      	movs	r2, #0
 8000562:	4619      	mov	r1, r3
 8000564:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000566:	f001 f95e 	bl	8001826 <HAL_GPIO_WritePin>
			break;
 800056a:	e084      	b.n	8000676 <set_display7SEG+0x3ba>
		case 7:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, RESET);
 800056c:	88fb      	ldrh	r3, [r7, #6]
 800056e:	2200      	movs	r2, #0
 8000570:	4619      	mov	r1, r3
 8000572:	68b8      	ldr	r0, [r7, #8]
 8000574:	f001 f957 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, RESET);
 8000578:	8b3b      	ldrh	r3, [r7, #24]
 800057a:	2200      	movs	r2, #0
 800057c:	4619      	mov	r1, r3
 800057e:	6838      	ldr	r0, [r7, #0]
 8000580:	f001 f951 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, RESET);
 8000584:	8c3b      	ldrh	r3, [r7, #32]
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	69f8      	ldr	r0, [r7, #28]
 800058c:	f001 f94b 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, SET);
 8000590:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000592:	2201      	movs	r2, #1
 8000594:	4619      	mov	r1, r3
 8000596:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000598:	f001 f945 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, SET);
 800059c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800059e:	2201      	movs	r2, #1
 80005a0:	4619      	mov	r1, r3
 80005a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80005a4:	f001 f93f 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, SET);
 80005a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80005aa:	2201      	movs	r2, #1
 80005ac:	4619      	mov	r1, r3
 80005ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80005b0:	f001 f939 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, SET);
 80005b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80005b8:	2201      	movs	r2, #1
 80005ba:	4619      	mov	r1, r3
 80005bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80005be:	f001 f932 	bl	8001826 <HAL_GPIO_WritePin>
			break;
 80005c2:	e058      	b.n	8000676 <set_display7SEG+0x3ba>
		case 8:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, RESET);
 80005c4:	88fb      	ldrh	r3, [r7, #6]
 80005c6:	2200      	movs	r2, #0
 80005c8:	4619      	mov	r1, r3
 80005ca:	68b8      	ldr	r0, [r7, #8]
 80005cc:	f001 f92b 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, RESET);
 80005d0:	8b3b      	ldrh	r3, [r7, #24]
 80005d2:	2200      	movs	r2, #0
 80005d4:	4619      	mov	r1, r3
 80005d6:	6838      	ldr	r0, [r7, #0]
 80005d8:	f001 f925 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, RESET);
 80005dc:	8c3b      	ldrh	r3, [r7, #32]
 80005de:	2200      	movs	r2, #0
 80005e0:	4619      	mov	r1, r3
 80005e2:	69f8      	ldr	r0, [r7, #28]
 80005e4:	f001 f91f 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, RESET);
 80005e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80005f0:	f001 f919 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, RESET);
 80005f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80005f6:	2200      	movs	r2, #0
 80005f8:	4619      	mov	r1, r3
 80005fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80005fc:	f001 f913 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, RESET);
 8000600:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000602:	2200      	movs	r2, #0
 8000604:	4619      	mov	r1, r3
 8000606:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000608:	f001 f90d 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, RESET);
 800060c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000610:	2200      	movs	r2, #0
 8000612:	4619      	mov	r1, r3
 8000614:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000616:	f001 f906 	bl	8001826 <HAL_GPIO_WritePin>
			break;
 800061a:	e02c      	b.n	8000676 <set_display7SEG+0x3ba>
		case 9:
			HAL_GPIO_WritePin(a_seg_GPIO_Port, a_seg_Pin, RESET);
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	2200      	movs	r2, #0
 8000620:	4619      	mov	r1, r3
 8000622:	68b8      	ldr	r0, [r7, #8]
 8000624:	f001 f8ff 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_seg_GPIO_Port, b_seg_Pin, RESET);
 8000628:	8b3b      	ldrh	r3, [r7, #24]
 800062a:	2200      	movs	r2, #0
 800062c:	4619      	mov	r1, r3
 800062e:	6838      	ldr	r0, [r7, #0]
 8000630:	f001 f8f9 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_seg_GPIO_Port, c_seg_Pin, RESET);
 8000634:	8c3b      	ldrh	r3, [r7, #32]
 8000636:	2200      	movs	r2, #0
 8000638:	4619      	mov	r1, r3
 800063a:	69f8      	ldr	r0, [r7, #28]
 800063c:	f001 f8f3 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_seg_GPIO_Port, d_seg_Pin, RESET);
 8000640:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000642:	2200      	movs	r2, #0
 8000644:	4619      	mov	r1, r3
 8000646:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000648:	f001 f8ed 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_seg_GPIO_Port, e_seg_Pin, SET);
 800064c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800064e:	2201      	movs	r2, #1
 8000650:	4619      	mov	r1, r3
 8000652:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000654:	f001 f8e7 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_seg_GPIO_Port, f_seg_Pin, RESET);
 8000658:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800065a:	2200      	movs	r2, #0
 800065c:	4619      	mov	r1, r3
 800065e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000660:	f001 f8e1 	bl	8001826 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_seg_GPIO_Port, g_seg_Pin, RESET);
 8000664:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800066e:	f001 f8da 	bl	8001826 <HAL_GPIO_WritePin>
			break;
 8000672:	e000      	b.n	8000676 <set_display7SEG+0x3ba>
		default:
			break;
 8000674:	bf00      	nop
	}
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop

08000680 <display7SEG>:


void display7SEG(int counter){
 8000680:	b580      	push	{r7, lr}
 8000682:	b08e      	sub	sp, #56	; 0x38
 8000684:	af0c      	add	r7, sp, #48	; 0x30
 8000686:	6078      	str	r0, [r7, #4]
	return set_display7SEG(counter,
 8000688:	2340      	movs	r3, #64	; 0x40
 800068a:	930a      	str	r3, [sp, #40]	; 0x28
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <display7SEG+0x48>)
 800068e:	9309      	str	r3, [sp, #36]	; 0x24
 8000690:	2320      	movs	r3, #32
 8000692:	9308      	str	r3, [sp, #32]
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <display7SEG+0x48>)
 8000696:	9307      	str	r3, [sp, #28]
 8000698:	2310      	movs	r3, #16
 800069a:	9306      	str	r3, [sp, #24]
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <display7SEG+0x48>)
 800069e:	9305      	str	r3, [sp, #20]
 80006a0:	2308      	movs	r3, #8
 80006a2:	9304      	str	r3, [sp, #16]
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <display7SEG+0x48>)
 80006a6:	9303      	str	r3, [sp, #12]
 80006a8:	2304      	movs	r3, #4
 80006aa:	9302      	str	r3, [sp, #8]
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <display7SEG+0x48>)
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	2302      	movs	r3, #2
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <display7SEG+0x48>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	4903      	ldr	r1, [pc, #12]	; (80006c8 <display7SEG+0x48>)
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f7ff fdfe 	bl	80002bc <set_display7SEG>
			SEG3_GPIO_Port,  SEG3_Pin,
			SEG4_GPIO_Port,  SEG4_Pin,
			SEG5_GPIO_Port,  SEG5_Pin,
			SEG6_GPIO_Port,  SEG6_Pin
			);
}
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40010c00 	.word	0x40010c00

080006cc <update7SEG>:


void update7SEG(int index){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	index = index % 4;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	425a      	negs	r2, r3
 80006d8:	f003 0303 	and.w	r3, r3, #3
 80006dc:	f002 0203 	and.w	r2, r2, #3
 80006e0:	bf58      	it	pl
 80006e2:	4253      	negpl	r3, r2
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	f200 8083 	bhi.w	80007f4 <update7SEG+0x128>
 80006ee:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <update7SEG+0x28>)
 80006f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f4:	08000705 	.word	0x08000705
 80006f8:	08000741 	.word	0x08000741
 80006fc:	0800077d 	.word	0x0800077d
 8000700:	080007b9 	.word	0x080007b9
    switch (index){
        case 0:
            //Display the first 7SEG with counter[0]
        	display7SEG(counter[0]);
 8000704:	4b3e      	ldr	r3, [pc, #248]	; (8000800 <update7SEG+0x134>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ffb9 	bl	8000680 <display7SEG>
        	  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000714:	483b      	ldr	r0, [pc, #236]	; (8000804 <update7SEG+0x138>)
 8000716:	f001 f886 	bl	8001826 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000720:	4838      	ldr	r0, [pc, #224]	; (8000804 <update7SEG+0x138>)
 8000722:	f001 f880 	bl	8001826 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072c:	4835      	ldr	r0, [pc, #212]	; (8000804 <update7SEG+0x138>)
 800072e:	f001 f87a 	bl	8001826 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000738:	4832      	ldr	r0, [pc, #200]	; (8000804 <update7SEG+0x138>)
 800073a:	f001 f874 	bl	8001826 <HAL_GPIO_WritePin>
            break;
 800073e:	e05a      	b.n	80007f6 <update7SEG+0x12a>
        case 1:
            //Display the second 7SEG with counter[1]
        	display7SEG(counter[1]);
 8000740:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <update7SEG+0x134>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff9b 	bl	8000680 <display7SEG>
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000750:	482c      	ldr	r0, [pc, #176]	; (8000804 <update7SEG+0x138>)
 8000752:	f001 f868 	bl	8001826 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075c:	4829      	ldr	r0, [pc, #164]	; (8000804 <update7SEG+0x138>)
 800075e:	f001 f862 	bl	8001826 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000768:	4826      	ldr	r0, [pc, #152]	; (8000804 <update7SEG+0x138>)
 800076a:	f001 f85c 	bl	8001826 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000774:	4823      	ldr	r0, [pc, #140]	; (8000804 <update7SEG+0x138>)
 8000776:	f001 f856 	bl	8001826 <HAL_GPIO_WritePin>
            break;
 800077a:	e03c      	b.n	80007f6 <update7SEG+0x12a>
        case 2:
//            Display the third 7SEG with counter[2]
        	display7SEG(counter[2]);
 800077c:	4b20      	ldr	r3, [pc, #128]	; (8000800 <update7SEG+0x134>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff7d 	bl	8000680 <display7SEG>
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078c:	481d      	ldr	r0, [pc, #116]	; (8000804 <update7SEG+0x138>)
 800078e:	f001 f84a 	bl	8001826 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000798:	481a      	ldr	r0, [pc, #104]	; (8000804 <update7SEG+0x138>)
 800079a:	f001 f844 	bl	8001826 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a4:	4817      	ldr	r0, [pc, #92]	; (8000804 <update7SEG+0x138>)
 80007a6:	f001 f83e 	bl	8001826 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007b0:	4814      	ldr	r0, [pc, #80]	; (8000804 <update7SEG+0x138>)
 80007b2:	f001 f838 	bl	8001826 <HAL_GPIO_WritePin>
            break;
 80007b6:	e01e      	b.n	80007f6 <update7SEG+0x12a>
        case 3:
//            Display the forth 7SEG with counter[3]
        	display7SEG(counter[3]);
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <update7SEG+0x134>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff5f 	bl	8000680 <display7SEG>
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c8:	480e      	ldr	r0, [pc, #56]	; (8000804 <update7SEG+0x138>)
 80007ca:	f001 f82c 	bl	8001826 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <update7SEG+0x138>)
 80007d6:	f001 f826 	bl	8001826 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e0:	4808      	ldr	r0, [pc, #32]	; (8000804 <update7SEG+0x138>)
 80007e2:	f001 f820 	bl	8001826 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <update7SEG+0x138>)
 80007ee:	f001 f81a 	bl	8001826 <HAL_GPIO_WritePin>
            break;
 80007f2:	e000      	b.n	80007f6 <update7SEG+0x12a>
        default:
            break;
 80007f4:	bf00      	nop
    }
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2000005c 	.word	0x2000005c
 8000804:	40010800 	.word	0x40010800

08000808 <fns_automata_run>:

#include "fns_automata.h"

int counterNUM[2]= {0, 0};

void fns_automata_run(){
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
//	counter[1] = counter_RED;
	if(timer3_flag){
 800080e:	4b59      	ldr	r3, [pc, #356]	; (8000974 <fns_automata_run+0x16c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d00d      	beq.n	8000832 <fns_automata_run+0x2a>
		setTimer3(1000);
 8000816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800081a:	f000 fbe1 	bl	8000fe0 <setTimer3>
		counterNUM[0]++;
 800081e:	4b56      	ldr	r3, [pc, #344]	; (8000978 <fns_automata_run+0x170>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	3301      	adds	r3, #1
 8000824:	4a54      	ldr	r2, [pc, #336]	; (8000978 <fns_automata_run+0x170>)
 8000826:	6013      	str	r3, [r2, #0]
		counterNUM[1]++;
 8000828:	4b53      	ldr	r3, [pc, #332]	; (8000978 <fns_automata_run+0x170>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	3301      	adds	r3, #1
 800082e:	4a52      	ldr	r2, [pc, #328]	; (8000978 <fns_automata_run+0x170>)
 8000830:	6053      	str	r3, [r2, #4]
	}


	for(int i = 0; i < 2; i ++){
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	e093      	b.n	8000960 <fns_automata_run+0x158>
//		if(status[1] == RED_AUTO) status[0] = GREEN_AUTO;
		switch(status[i]){
 8000838:	4a50      	ldr	r2, [pc, #320]	; (800097c <fns_automata_run+0x174>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000840:	3b01      	subs	r3, #1
 8000842:	2b03      	cmp	r3, #3
 8000844:	f200 8082 	bhi.w	800094c <fns_automata_run+0x144>
 8000848:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <fns_automata_run+0x48>)
 800084a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084e:	bf00      	nop
 8000850:	08000861 	.word	0x08000861
 8000854:	0800089f 	.word	0x0800089f
 8000858:	080008d9 	.word	0x080008d9
 800085c:	08000913 	.word	0x08000913
			case INIT:
				ALL_LIGHT_OFF();
 8000860:	f000 fa5a 	bl	8000d18 <ALL_LIGHT_OFF>
				status[i] = RED_AUTO;
 8000864:	4a45      	ldr	r2, [pc, #276]	; (800097c <fns_automata_run+0x174>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2102      	movs	r1, #2
 800086a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer1(100, i);
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	2064      	movs	r0, #100	; 0x64
 8000872:	f000 fb83 	bl	8000f7c <setTimer1>
				counterNUM[i] = 0;
 8000876:	4a40      	ldr	r2, [pc, #256]	; (8000978 <fns_automata_run+0x170>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2100      	movs	r1, #0
 800087c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				counter[1] = counter_RED;
 8000880:	4b3f      	ldr	r3, [pc, #252]	; (8000980 <fns_automata_run+0x178>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a3f      	ldr	r2, [pc, #252]	; (8000984 <fns_automata_run+0x17c>)
 8000886:	6053      	str	r3, [r2, #4]
				counter[0] = counter_GREEN;
 8000888:	4b3f      	ldr	r3, [pc, #252]	; (8000988 <fns_automata_run+0x180>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a3d      	ldr	r2, [pc, #244]	; (8000984 <fns_automata_run+0x17c>)
 800088e:	6013      	str	r3, [r2, #0]
				status[1] = RED_AUTO;
 8000890:	4b3a      	ldr	r3, [pc, #232]	; (800097c <fns_automata_run+0x174>)
 8000892:	2202      	movs	r2, #2
 8000894:	605a      	str	r2, [r3, #4]
				status[0] = GREEN_AUTO;
 8000896:	4b39      	ldr	r3, [pc, #228]	; (800097c <fns_automata_run+0x174>)
 8000898:	2203      	movs	r2, #3
 800089a:	601a      	str	r2, [r3, #0]
				break;
 800089c:	e05d      	b.n	800095a <fns_automata_run+0x152>
			case RED_AUTO:
				RED_LIGHT(i);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 f99c 	bl	8000bdc <RED_LIGHT>
				if(timer1_flag[i]){
 80008a4:	4a39      	ldr	r2, [pc, #228]	; (800098c <fns_automata_run+0x184>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d04f      	beq.n	8000950 <fns_automata_run+0x148>
					status[i] = GREEN_AUTO;
 80008b0:	4a32      	ldr	r2, [pc, #200]	; (800097c <fns_automata_run+0x174>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2103      	movs	r1, #3
 80008b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					setTimer1(counter_GREEN*100, i);
 80008ba:	4b33      	ldr	r3, [pc, #204]	; (8000988 <fns_automata_run+0x180>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2264      	movs	r2, #100	; 0x64
 80008c0:	fb02 f303 	mul.w	r3, r2, r3
 80008c4:	6879      	ldr	r1, [r7, #4]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fb58 	bl	8000f7c <setTimer1>


					counterNUM[i] = 0;
 80008cc:	4a2a      	ldr	r2, [pc, #168]	; (8000978 <fns_automata_run+0x170>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2100      	movs	r1, #0
 80008d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				break;
 80008d6:	e03b      	b.n	8000950 <fns_automata_run+0x148>
			case GREEN_AUTO:
				GREEN_LIGHT(i);
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f000 f9d3 	bl	8000c84 <GREEN_LIGHT>
				if(timer1_flag[i]){
 80008de:	4a2b      	ldr	r2, [pc, #172]	; (800098c <fns_automata_run+0x184>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d034      	beq.n	8000954 <fns_automata_run+0x14c>
					status[i] = YELLOW_AUTO;
 80008ea:	4a24      	ldr	r2, [pc, #144]	; (800097c <fns_automata_run+0x174>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2104      	movs	r1, #4
 80008f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					setTimer1(counter_AMBER*100, i);
 80008f4:	4b26      	ldr	r3, [pc, #152]	; (8000990 <fns_automata_run+0x188>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2264      	movs	r2, #100	; 0x64
 80008fa:	fb02 f303 	mul.w	r3, r2, r3
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	4618      	mov	r0, r3
 8000902:	f000 fb3b 	bl	8000f7c <setTimer1>


					counterNUM[i] = 0;
 8000906:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <fns_automata_run+0x170>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2100      	movs	r1, #0
 800090c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				break;
 8000910:	e020      	b.n	8000954 <fns_automata_run+0x14c>
			case YELLOW_AUTO:
				YELLOW_LIGHT(i);
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f000 f98c 	bl	8000c30 <YELLOW_LIGHT>
				if(timer1_flag[i]){
 8000918:	4a1c      	ldr	r2, [pc, #112]	; (800098c <fns_automata_run+0x184>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d019      	beq.n	8000958 <fns_automata_run+0x150>
					status[i] = RED_AUTO;
 8000924:	4a15      	ldr	r2, [pc, #84]	; (800097c <fns_automata_run+0x174>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2102      	movs	r1, #2
 800092a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					setTimer1(counter_RED*100, i);
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <fns_automata_run+0x178>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2264      	movs	r2, #100	; 0x64
 8000934:	fb02 f303 	mul.w	r3, r2, r3
 8000938:	6879      	ldr	r1, [r7, #4]
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fb1e 	bl	8000f7c <setTimer1>


					counterNUM[i] = 0;
 8000940:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <fns_automata_run+0x170>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2100      	movs	r1, #0
 8000946:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				break;
 800094a:	e005      	b.n	8000958 <fns_automata_run+0x150>
			default :
				break;
 800094c:	bf00      	nop
 800094e:	e004      	b.n	800095a <fns_automata_run+0x152>
				break;
 8000950:	bf00      	nop
 8000952:	e002      	b.n	800095a <fns_automata_run+0x152>
				break;
 8000954:	bf00      	nop
 8000956:	e000      	b.n	800095a <fns_automata_run+0x152>
				break;
 8000958:	bf00      	nop
	for(int i = 0; i < 2; i ++){
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3301      	adds	r3, #1
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b01      	cmp	r3, #1
 8000964:	f77f af68 	ble.w	8000838 <fns_automata_run+0x30>
		}
	}
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000009c 	.word	0x2000009c
 8000978:	2000006c 	.word	0x2000006c
 800097c:	20000074 	.word	0x20000074
 8000980:	20000024 	.word	0x20000024
 8000984:	2000005c 	.word	0x2000005c
 8000988:	2000002c 	.word	0x2000002c
 800098c:	20000088 	.word	0x20000088
 8000990:	20000028 	.word	0x20000028

08000994 <run_MODE2>:
 *      Author: Huy Minh
 */

#include "fns_mode.h"

void run_MODE2(){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	ALL_LIGHT_OFF();
 8000998:	f000 f9be 	bl	8000d18 <ALL_LIGHT_OFF>
};
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <fns_mode_run>:

void fns_mode_run(){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	if(timer2_flag){
 80009a4:	4b58      	ldr	r3, [pc, #352]	; (8000b08 <fns_mode_run+0x168>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d00a      	beq.n	80009c2 <fns_mode_run+0x22>
	    setTimer2(250);
 80009ac:	20fa      	movs	r0, #250	; 0xfa
 80009ae:	f000 fb01 	bl	8000fb4 <setTimer2>
	    update7SEG(index++);
 80009b2:	4b56      	ldr	r3, [pc, #344]	; (8000b0c <fns_mode_run+0x16c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	4954      	ldr	r1, [pc, #336]	; (8000b0c <fns_mode_run+0x16c>)
 80009ba:	600a      	str	r2, [r1, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fe85 	bl	80006cc <update7SEG>
    }

	switch(mode){
 80009c2:	4b53      	ldr	r3, [pc, #332]	; (8000b10 <fns_mode_run+0x170>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	2b0d      	cmp	r3, #13
 80009ca:	f200 8092 	bhi.w	8000af2 <fns_mode_run+0x152>
 80009ce:	a201      	add	r2, pc, #4	; (adr r2, 80009d4 <fns_mode_run+0x34>)
 80009d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d4:	08000a0d 	.word	0x08000a0d
 80009d8:	08000af3 	.word	0x08000af3
 80009dc:	08000af3 	.word	0x08000af3
 80009e0:	08000af3 	.word	0x08000af3
 80009e4:	08000af3 	.word	0x08000af3
 80009e8:	08000af3 	.word	0x08000af3
 80009ec:	08000af3 	.word	0x08000af3
 80009f0:	08000af3 	.word	0x08000af3
 80009f4:	08000af3 	.word	0x08000af3
 80009f8:	08000af3 	.word	0x08000af3
 80009fc:	08000a1f 	.word	0x08000a1f
 8000a00:	08000a51 	.word	0x08000a51
 8000a04:	08000a87 	.word	0x08000a87
 8000a08:	08000abd 	.word	0x08000abd
		case INIT:

			run_MODE2();
 8000a0c:	f7ff ffc2 	bl	8000994 <run_MODE2>
			status[1] = INIT;
 8000a10:	4b40      	ldr	r3, [pc, #256]	; (8000b14 <fns_mode_run+0x174>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	605a      	str	r2, [r3, #4]
			mode = MODE_1;
 8000a16:	4b3e      	ldr	r3, [pc, #248]	; (8000b10 <fns_mode_run+0x170>)
 8000a18:	220b      	movs	r2, #11
 8000a1a:	601a      	str	r2, [r3, #0]
			break;
 8000a1c:	e072      	b.n	8000b04 <fns_mode_run+0x164>

		case MODE_1:
			setTimer1(100, 1);
 8000a1e:	2101      	movs	r1, #1
 8000a20:	2064      	movs	r0, #100	; 0x64
 8000a22:	f000 faab 	bl	8000f7c <setTimer1>
			setTimer1(100, 2);
 8000a26:	2102      	movs	r1, #2
 8000a28:	2064      	movs	r0, #100	; 0x64
 8000a2a:	f000 faa7 	bl	8000f7c <setTimer1>
			fns_automata_run();
 8000a2e:	f7ff feeb 	bl	8000808 <fns_automata_run>
			if(isButtonPressed(1)){
 8000a32:	2001      	movs	r0, #1
 8000a34:	f7ff fb9a 	bl	800016c <isButtonPressed>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d05b      	beq.n	8000af6 <fns_mode_run+0x156>
				mode = MODE_2;
 8000a3e:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <fns_mode_run+0x170>)
 8000a40:	220c      	movs	r2, #12
 8000a42:	601a      	str	r2, [r3, #0]
				setTimer1(5000, 0);
 8000a44:	2100      	movs	r1, #0
 8000a46:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a4a:	f000 fa97 	bl	8000f7c <setTimer1>
			}
			break;
 8000a4e:	e052      	b.n	8000af6 <fns_mode_run+0x156>

		case MODE_2:
			run_MODE2();
 8000a50:	f7ff ffa0 	bl	8000994 <run_MODE2>
//			fns_mode2_run();
			if(timer1_flag[0]){
 8000a54:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <fns_mode_run+0x178>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d005      	beq.n	8000a68 <fns_mode_run+0xc8>
				status[1] = INIT;
 8000a5c:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <fns_mode_run+0x174>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	605a      	str	r2, [r3, #4]
				mode = MODE_1;
 8000a62:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <fns_mode_run+0x170>)
 8000a64:	220b      	movs	r2, #11
 8000a66:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)){
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f7ff fb7f 	bl	800016c <isButtonPressed>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d042      	beq.n	8000afa <fns_mode_run+0x15a>
				mode = MODE_3;
 8000a74:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <fns_mode_run+0x170>)
 8000a76:	220d      	movs	r2, #13
 8000a78:	601a      	str	r2, [r3, #0]
				setTimer1(5000, 0);
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a80:	f000 fa7c 	bl	8000f7c <setTimer1>
			}
			break;
 8000a84:	e039      	b.n	8000afa <fns_mode_run+0x15a>

		case MODE_3:
			run_MODE2();
 8000a86:	f7ff ff85 	bl	8000994 <run_MODE2>
//			fns_mode2_run();
			if(timer1_flag[0]){
 8000a8a:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <fns_mode_run+0x178>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d005      	beq.n	8000a9e <fns_mode_run+0xfe>
				status[1] = INIT;
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <fns_mode_run+0x174>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	605a      	str	r2, [r3, #4]
				mode = MODE_1;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <fns_mode_run+0x170>)
 8000a9a:	220b      	movs	r2, #11
 8000a9c:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)){
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f7ff fb64 	bl	800016c <isButtonPressed>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d029      	beq.n	8000afe <fns_mode_run+0x15e>
				mode = MODE_4;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <fns_mode_run+0x170>)
 8000aac:	220e      	movs	r2, #14
 8000aae:	601a      	str	r2, [r3, #0]
				setTimer1(5000, 0);
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ab6:	f000 fa61 	bl	8000f7c <setTimer1>
			}
			break;
 8000aba:	e020      	b.n	8000afe <fns_mode_run+0x15e>
		case MODE_4:
			run_MODE2();
 8000abc:	f7ff ff6a 	bl	8000994 <run_MODE2>
//			fns_mode2_run();
			if(timer1_flag[0]){
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <fns_mode_run+0x178>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d005      	beq.n	8000ad4 <fns_mode_run+0x134>
				status[1] = INIT;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <fns_mode_run+0x174>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	605a      	str	r2, [r3, #4]
				mode = MODE_1;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <fns_mode_run+0x170>)
 8000ad0:	220b      	movs	r2, #11
 8000ad2:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)){
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f7ff fb49 	bl	800016c <isButtonPressed>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d010      	beq.n	8000b02 <fns_mode_run+0x162>
				mode = MODE_1;
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <fns_mode_run+0x170>)
 8000ae2:	220b      	movs	r2, #11
 8000ae4:	601a      	str	r2, [r3, #0]
				setTimer1(5000, 0);
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	f241 3088 	movw	r0, #5000	; 0x1388
 8000aec:	f000 fa46 	bl	8000f7c <setTimer1>
			}
			break;
 8000af0:	e007      	b.n	8000b02 <fns_mode_run+0x162>
		default:
			break;
 8000af2:	bf00      	nop
 8000af4:	e006      	b.n	8000b04 <fns_mode_run+0x164>
			break;
 8000af6:	bf00      	nop
 8000af8:	e004      	b.n	8000b04 <fns_mode_run+0x164>
			break;
 8000afa:	bf00      	nop
 8000afc:	e002      	b.n	8000b04 <fns_mode_run+0x164>
			break;
 8000afe:	bf00      	nop
 8000b00:	e000      	b.n	8000b04 <fns_mode_run+0x164>
			break;
 8000b02:	bf00      	nop
	}
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000094 	.word	0x20000094
 8000b0c:	20000030 	.word	0x20000030
 8000b10:	2000007c 	.word	0x2000007c
 8000b14:	20000074 	.word	0x20000074
 8000b18:	20000088 	.word	0x20000088

08000b1c <RED_LIGHT_mode>:


void RED_LIGHT_mode(
		GPIO_TypeDef* LED_RED_GPIO_Port, uint16_t LED_RED_Pin,
		GPIO_TypeDef* LED_AMBER_GPIO_Port, uint16_t LED_AMBER_Pin,
		GPIO_TypeDef* LED_GREEN_GPIO_Port, uint16_t LED_GREEN_Pin){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	461a      	mov	r2, r3
 8000b28:	460b      	mov	r3, r1
 8000b2a:	817b      	strh	r3, [r7, #10]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	813b      	strh	r3, [r7, #8]
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8000b30:	897b      	ldrh	r3, [r7, #10]
 8000b32:	2200      	movs	r2, #0
 8000b34:	4619      	mov	r1, r3
 8000b36:	68f8      	ldr	r0, [r7, #12]
 8000b38:	f000 fe75 	bl	8001826 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_AMBER_GPIO_Port, LED_AMBER_Pin, SET);
 8000b3c:	893b      	ldrh	r3, [r7, #8]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4619      	mov	r1, r3
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 fe6f 	bl	8001826 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000b48:	8bbb      	ldrh	r3, [r7, #28]
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	69b8      	ldr	r0, [r7, #24]
 8000b50:	f000 fe69 	bl	8001826 <HAL_GPIO_WritePin>
}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <YELLOW_LIGHT_mode>:

void YELLOW_LIGHT_mode(
		GPIO_TypeDef* LED_RED_GPIO_Port, uint16_t LED_RED_Pin,
		GPIO_TypeDef* LED_AMBER_GPIO_Port, uint16_t LED_AMBER_Pin,
		GPIO_TypeDef* LED_GREEN_GPIO_Port, uint16_t LED_GREEN_Pin){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	461a      	mov	r2, r3
 8000b68:	460b      	mov	r3, r1
 8000b6a:	817b      	strh	r3, [r7, #10]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	813b      	strh	r3, [r7, #8]
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000b70:	897b      	ldrh	r3, [r7, #10]
 8000b72:	2201      	movs	r2, #1
 8000b74:	4619      	mov	r1, r3
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f000 fe55 	bl	8001826 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_AMBER_GPIO_Port, LED_AMBER_Pin, RESET);
 8000b7c:	893b      	ldrh	r3, [r7, #8]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4619      	mov	r1, r3
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f000 fe4f 	bl	8001826 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000b88:	8bbb      	ldrh	r3, [r7, #28]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	69b8      	ldr	r0, [r7, #24]
 8000b90:	f000 fe49 	bl	8001826 <HAL_GPIO_WritePin>
}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <GREEN_LIGHT_mode>:

void GREEN_LIGHT_mode(
		GPIO_TypeDef* LED_RED_GPIO_Port, uint16_t LED_RED_Pin,
		GPIO_TypeDef* LED_AMBER_GPIO_Port, uint16_t LED_AMBER_Pin,
		GPIO_TypeDef* LED_GREEN_GPIO_Port, uint16_t LED_GREEN_Pin){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	460b      	mov	r3, r1
 8000baa:	817b      	strh	r3, [r7, #10]
 8000bac:	4613      	mov	r3, r2
 8000bae:	813b      	strh	r3, [r7, #8]
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000bb0:	897b      	ldrh	r3, [r7, #10]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f000 fe35 	bl	8001826 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_AMBER_GPIO_Port, LED_AMBER_Pin, SET);
 8000bbc:	893b      	ldrh	r3, [r7, #8]
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f000 fe2f 	bl	8001826 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 8000bc8:	8bbb      	ldrh	r3, [r7, #28]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	4619      	mov	r1, r3
 8000bce:	69b8      	ldr	r0, [r7, #24]
 8000bd0:	f000 fe29 	bl	8001826 <HAL_GPIO_WritePin>

}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <RED_LIGHT>:


void RED_LIGHT(int i){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af02      	add	r7, sp, #8
 8000be2:	6078      	str	r0, [r7, #4]
	if (i % 2 == 1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	bfb8      	it	lt
 8000bee:	425b      	neglt	r3, r3
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d10b      	bne.n	8000c0c <RED_LIGHT+0x30>
		return RED_LIGHT_mode(
 8000bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf8:	9301      	str	r3, [sp, #4]
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <RED_LIGHT+0x50>)
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	2380      	movs	r3, #128	; 0x80
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <RED_LIGHT+0x50>)
 8000c02:	2140      	movs	r1, #64	; 0x40
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <RED_LIGHT+0x50>)
 8000c06:	f7ff ff89 	bl	8000b1c <RED_LIGHT_mode>
 8000c0a:	e00c      	b.n	8000c26 <RED_LIGHT+0x4a>
		  LED_RED1_GPIO_Port, LED_RED1_Pin,
		  LED_AMBER1_GPIO_Port, LED_AMBER1_Pin,
		  LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
	else
		return RED_LIGHT_mode(
 8000c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <RED_LIGHT+0x50>)
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1a:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <RED_LIGHT+0x50>)
 8000c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <RED_LIGHT+0x50>)
 8000c22:	f7ff ff7b 	bl	8000b1c <RED_LIGHT_mode>
			  LED_RED2_GPIO_Port, LED_RED2_Pin,
			  LED_AMBER2_GPIO_Port, LED_AMBER2_Pin,
			  LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);

}
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40010800 	.word	0x40010800

08000c30 <YELLOW_LIGHT>:

void YELLOW_LIGHT(int i){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	6078      	str	r0, [r7, #4]
	if (i % 2 == 1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	bfb8      	it	lt
 8000c42:	425b      	neglt	r3, r3
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d10b      	bne.n	8000c60 <YELLOW_LIGHT+0x30>
		return YELLOW_LIGHT_mode(
 8000c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c4c:	9301      	str	r3, [sp, #4]
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <YELLOW_LIGHT+0x50>)
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <YELLOW_LIGHT+0x50>)
 8000c56:	2140      	movs	r1, #64	; 0x40
 8000c58:	4809      	ldr	r0, [pc, #36]	; (8000c80 <YELLOW_LIGHT+0x50>)
 8000c5a:	f7ff ff7f 	bl	8000b5c <YELLOW_LIGHT_mode>
 8000c5e:	e00c      	b.n	8000c7a <YELLOW_LIGHT+0x4a>
		  LED_RED1_GPIO_Port, LED_RED1_Pin,
		  LED_AMBER1_GPIO_Port, LED_AMBER1_Pin,
		  LED_GREEN1_GPIO_Port, LED_GREEN1_Pin
		  );
	else
		return YELLOW_LIGHT_mode(
 8000c60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <YELLOW_LIGHT+0x50>)
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6e:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <YELLOW_LIGHT+0x50>)
 8000c70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <YELLOW_LIGHT+0x50>)
 8000c76:	f7ff ff71 	bl	8000b5c <YELLOW_LIGHT_mode>
		  LED_RED2_GPIO_Port, LED_RED2_Pin,
		  LED_AMBER2_GPIO_Port, LED_AMBER2_Pin,
		  LED_GREEN2_GPIO_Port, LED_GREEN2_Pin
		  );
}
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40010800 	.word	0x40010800

08000c84 <GREEN_LIGHT>:

void GREEN_LIGHT(int i){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	6078      	str	r0, [r7, #4]
	if (i % 2 == 1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	bfb8      	it	lt
 8000c96:	425b      	neglt	r3, r3
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d10b      	bne.n	8000cb4 <GREEN_LIGHT+0x30>
		return GREEN_LIGHT_mode(
 8000c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <GREEN_LIGHT+0x50>)
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <GREEN_LIGHT+0x50>)
 8000caa:	2140      	movs	r1, #64	; 0x40
 8000cac:	4809      	ldr	r0, [pc, #36]	; (8000cd4 <GREEN_LIGHT+0x50>)
 8000cae:	f7ff ff75 	bl	8000b9c <GREEN_LIGHT_mode>
 8000cb2:	e00c      	b.n	8000cce <GREEN_LIGHT+0x4a>
		  LED_RED1_GPIO_Port, LED_RED1_Pin,
		  LED_AMBER1_GPIO_Port, LED_AMBER1_Pin,
		  LED_GREEN1_GPIO_Port, LED_GREEN1_Pin
		  );
	else
		return GREEN_LIGHT_mode(
 8000cb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <GREEN_LIGHT+0x50>)
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <GREEN_LIGHT+0x50>)
 8000cc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <GREEN_LIGHT+0x50>)
 8000cca:	f7ff ff67 	bl	8000b9c <GREEN_LIGHT_mode>
		  LED_RED2_GPIO_Port, LED_RED2_Pin,
		  LED_AMBER2_GPIO_Port, LED_AMBER2_Pin,
		  LED_GREEN2_GPIO_Port, LED_GREEN2_Pin
		  );
}
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40010800 	.word	0x40010800

08000cd8 <LIGHT_OFF>:


void LIGHT_OFF(
		GPIO_TypeDef* LED_RED_GPIO_Port, uint16_t LED_RED_Pin,
		GPIO_TypeDef* LED_AMBER_GPIO_Port, uint16_t LED_AMBER_Pin,
		GPIO_TypeDef* LED_GREEN_GPIO_Port, uint16_t LED_GREEN_Pin){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	817b      	strh	r3, [r7, #10]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	813b      	strh	r3, [r7, #8]
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000cec:	897b      	ldrh	r3, [r7, #10]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f000 fd97 	bl	8001826 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_AMBER_GPIO_Port, LED_AMBER_Pin, SET);
 8000cf8:	893b      	ldrh	r3, [r7, #8]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f000 fd91 	bl	8001826 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000d04:	8bbb      	ldrh	r3, [r7, #28]
 8000d06:	2201      	movs	r2, #1
 8000d08:	4619      	mov	r1, r3
 8000d0a:	69b8      	ldr	r0, [r7, #24]
 8000d0c:	f000 fd8b 	bl	8001826 <HAL_GPIO_WritePin>
}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <ALL_LIGHT_OFF>:

void ALL_LIGHT_OFF(){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af02      	add	r7, sp, #8
	LIGHT_OFF(
 8000d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d22:	9301      	str	r3, [sp, #4]
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <ALL_LIGHT_OFF+0x3c>)
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <ALL_LIGHT_OFF+0x3c>)
 8000d2c:	2140      	movs	r1, #64	; 0x40
 8000d2e:	4809      	ldr	r0, [pc, #36]	; (8000d54 <ALL_LIGHT_OFF+0x3c>)
 8000d30:	f7ff ffd2 	bl	8000cd8 <LIGHT_OFF>
	  LED_RED1_GPIO_Port, LED_RED1_Pin,
	  LED_AMBER1_GPIO_Port, LED_AMBER1_Pin,
	  LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
	LIGHT_OFF(
 8000d34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d38:	9301      	str	r3, [sp, #4]
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <ALL_LIGHT_OFF+0x3c>)
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d42:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <ALL_LIGHT_OFF+0x3c>)
 8000d44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <ALL_LIGHT_OFF+0x3c>)
 8000d4a:	f7ff ffc5 	bl	8000cd8 <LIGHT_OFF>
		  LED_RED2_GPIO_Port, LED_RED2_Pin,
		  LED_AMBER2_GPIO_Port, LED_AMBER2_Pin,
		  LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40010800 	.word	0x40010800

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5c:	f000 fa62 	bl	8001224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d60:	f000 f812 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d64:	f000 f898 	bl	8000e98 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d68:	f000 f84a 	bl	8000e00 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <main+0x28>)
 8000d6e:	f001 f99f 	bl	80020b0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  status = INIT;
  mode = INIT;
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <main+0x2c>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fns_mode_run();
 8000d78:	f7ff fe12 	bl	80009a0 <fns_mode_run>
  {
 8000d7c:	e7fc      	b.n	8000d78 <main+0x20>
 8000d7e:	bf00      	nop
 8000d80:	200000b8 	.word	0x200000b8
 8000d84:	2000007c 	.word	0x2000007c

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b090      	sub	sp, #64	; 0x40
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0318 	add.w	r3, r7, #24
 8000d92:	2228      	movs	r2, #40	; 0x28
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 fd46 	bl	8002828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dae:	2301      	movs	r3, #1
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db2:	2310      	movs	r3, #16
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dba:	f107 0318 	add.w	r3, r7, #24
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fd4a 	bl	8001858 <HAL_RCC_OscConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dca:	f000 f8d1 	bl	8000f70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dce:	230f      	movs	r3, #15
 8000dd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 ffb6 	bl	8001d58 <HAL_RCC_ClockConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000df2:	f000 f8bd 	bl	8000f70 <Error_Handler>
  }
}
 8000df6:	bf00      	nop
 8000df8:	3740      	adds	r7, #64	; 0x40
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	463b      	mov	r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e26:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e34:	2209      	movs	r2, #9
 8000e36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e44:	4813      	ldr	r0, [pc, #76]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e46:	f001 f8e3 	bl	8002010 <HAL_TIM_Base_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e50:	f000 f88e 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e62:	f001 fa79 	bl	8002358 <HAL_TIM_ConfigClockSource>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e6c:	f000 f880 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e7e:	f001 fc45 	bl	800270c <HAL_TIMEx_MasterConfigSynchronization>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e88:	f000 f872 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200000b8 	.word	0x200000b8

08000e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <MX_GPIO_Init+0xb4>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a26      	ldr	r2, [pc, #152]	; (8000f4c <MX_GPIO_Init+0xb4>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <MX_GPIO_Init+0xb4>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <MX_GPIO_Init+0xb4>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a20      	ldr	r2, [pc, #128]	; (8000f4c <MX_GPIO_Init+0xb4>)
 8000eca:	f043 0308 	orr.w	r3, r3, #8
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <MX_GPIO_Init+0xb4>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_AMBER1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000edc:	2200      	movs	r2, #0
 8000ede:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8000ee2:	481b      	ldr	r0, [pc, #108]	; (8000f50 <MX_GPIO_Init+0xb8>)
 8000ee4:	f000 fc9f 	bl	8001826 <HAL_GPIO_WritePin>
                          |LED_AMBER2_Pin|LED_GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000ee8:	2200      	movs	r2, #0
 8000eea:	217f      	movs	r1, #127	; 0x7f
 8000eec:	4819      	ldr	r0, [pc, #100]	; (8000f54 <MX_GPIO_Init+0xbc>)
 8000eee:	f000 fc9a 	bl	8001826 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000ef2:	230e      	movs	r3, #14
 8000ef4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	4619      	mov	r1, r3
 8000f04:	4812      	ldr	r0, [pc, #72]	; (8000f50 <MX_GPIO_Init+0xb8>)
 8000f06:	f000 fafd 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED_AMBER1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_AMBER2_Pin LED_GREEN2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_AMBER1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000f0a:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000f0e:	60bb      	str	r3, [r7, #8]
                          |LED_AMBER2_Pin|LED_GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	4619      	mov	r1, r3
 8000f22:	480b      	ldr	r0, [pc, #44]	; (8000f50 <MX_GPIO_Init+0xb8>)
 8000f24:	f000 faee 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000f28:	237f      	movs	r3, #127	; 0x7f
 8000f2a:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2302      	movs	r3, #2
 8000f36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_GPIO_Init+0xbc>)
 8000f40:	f000 fae0 	bl	8001504 <HAL_GPIO_Init>

}
 8000f44:	bf00      	nop
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010800 	.word	0x40010800
 8000f54:	40010c00 	.word	0x40010c00

08000f58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000f60:	f000 f854 	bl	800100c <timerRun>
	getKeyInput();
 8000f64:	f7ff f91c 	bl	80001a0 <getKeyInput>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <Error_Handler+0x8>
	...

08000f7c <setTimer1>:
int timer3_flag = 0;


const int TICK = 10;

void setTimer1(int duration, int index){
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
	timer1_counter[index] = duration/TICK;
 8000f86:	220a      	movs	r2, #10
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	fb93 f2f2 	sdiv	r2, r3, r2
 8000f8e:	4907      	ldr	r1, [pc, #28]	; (8000fac <setTimer1+0x30>)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer1_flag[index] = 0;
 8000f96:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <setTimer1+0x34>)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000080 	.word	0x20000080
 8000fb0:	20000088 	.word	0x20000088

08000fb4 <setTimer2>:

void setTimer2(int duration){
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8000fbc:	220a      	movs	r2, #10
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <setTimer2+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <setTimer2+0x28>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	20000090 	.word	0x20000090
 8000fdc:	20000094 	.word	0x20000094

08000fe0 <setTimer3>:

void setTimer3(int duration){
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8000fe8:	220a      	movs	r2, #10
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	fb93 f3f2 	sdiv	r3, r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <setTimer3+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <setTimer3+0x28>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	20000098 	.word	0x20000098
 8001008:	2000009c 	.word	0x2000009c

0800100c <timerRun>:

void timerRun(){
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; i++){
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	e01c      	b.n	8001052 <timerRun+0x46>
		if(timer1_counter[i] > 0){
 8001018:	4a22      	ldr	r2, [pc, #136]	; (80010a4 <timerRun+0x98>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd13      	ble.n	800104c <timerRun+0x40>
			timer1_counter[i]--;
 8001024:	4a1f      	ldr	r2, [pc, #124]	; (80010a4 <timerRun+0x98>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102c:	1e5a      	subs	r2, r3, #1
 800102e:	491d      	ldr	r1, [pc, #116]	; (80010a4 <timerRun+0x98>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer1_counter[i] <= 0){
 8001036:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <timerRun+0x98>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103e:	2b00      	cmp	r3, #0
 8001040:	dc04      	bgt.n	800104c <timerRun+0x40>
				timer1_flag[i] = 1;
 8001042:	4a19      	ldr	r2, [pc, #100]	; (80010a8 <timerRun+0x9c>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2101      	movs	r1, #1
 8001048:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 2; i++){
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3301      	adds	r3, #1
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b01      	cmp	r3, #1
 8001056:	dddf      	ble.n	8001018 <timerRun+0xc>
			}
		}
	}
	if(timer2_counter > 0){
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <timerRun+0xa0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	dd0b      	ble.n	8001078 <timerRun+0x6c>
		timer2_counter--;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <timerRun+0xa0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	3b01      	subs	r3, #1
 8001066:	4a11      	ldr	r2, [pc, #68]	; (80010ac <timerRun+0xa0>)
 8001068:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <timerRun+0xa0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	dc02      	bgt.n	8001078 <timerRun+0x6c>
			timer2_flag = 1;
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <timerRun+0xa4>)
 8001074:	2201      	movs	r2, #1
 8001076:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <timerRun+0xa8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	dd0b      	ble.n	8001098 <timerRun+0x8c>
		timer3_counter--;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <timerRun+0xa8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3b01      	subs	r3, #1
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <timerRun+0xa8>)
 8001088:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <timerRun+0xa8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	dc02      	bgt.n	8001098 <timerRun+0x8c>
			timer3_flag = 1;
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <timerRun+0xac>)
 8001094:	2201      	movs	r2, #1
 8001096:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000080 	.word	0x20000080
 80010a8:	20000088 	.word	0x20000088
 80010ac:	20000090 	.word	0x20000090
 80010b0:	20000094 	.word	0x20000094
 80010b4:	20000098 	.word	0x20000098
 80010b8:	2000009c 	.word	0x2000009c

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_MspInit+0x5c>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <HAL_MspInit+0x5c>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6193      	str	r3, [r2, #24]
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_MspInit+0x5c>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_MspInit+0x5c>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <HAL_MspInit+0x5c>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	61d3      	str	r3, [r2, #28]
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <HAL_MspInit+0x5c>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_MspInit+0x60>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_MspInit+0x60>)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	40021000 	.word	0x40021000
 800111c:	40010000 	.word	0x40010000

08001120 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001130:	d113      	bne.n	800115a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_TIM_Base_MspInit+0x44>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <HAL_TIM_Base_MspInit+0x44>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_TIM_Base_MspInit+0x44>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	201c      	movs	r0, #28
 8001150:	f000 f9a1 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001154:	201c      	movs	r0, #28
 8001156:	f000 f9ba 	bl	80014ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800116c:	e7fe      	b.n	800116c <NMI_Handler+0x4>

0800116e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler+0x4>

0800117a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <BusFault_Handler+0x4>

08001180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <UsageFault_Handler+0x4>

08001186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr

0800119e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr

080011aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ae:	f000 f87f 	bl	80012b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <TIM2_IRQHandler+0x10>)
 80011be:	f000 ffc3 	bl	8002148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200000b8 	.word	0x200000b8

080011cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d8:	f7ff fff8 	bl	80011cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011dc:	480b      	ldr	r0, [pc, #44]	; (800120c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011de:	490c      	ldr	r1, [pc, #48]	; (8001210 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011e0:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011f4:	4c09      	ldr	r4, [pc, #36]	; (800121c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001202:	f001 faed 	bl	80027e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001206:	f7ff fda7 	bl	8000d58 <main>
  bx lr
 800120a:	4770      	bx	lr
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001214:	0800287c 	.word	0x0800287c
  ldr r2, =_sbss
 8001218:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 800121c:	20000104 	.word	0x20000104

08001220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC1_2_IRQHandler>
	...

08001224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_Init+0x28>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <HAL_Init+0x28>)
 800122e:	f043 0310 	orr.w	r3, r3, #16
 8001232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001234:	2003      	movs	r0, #3
 8001236:	f000 f923 	bl	8001480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123a:	200f      	movs	r0, #15
 800123c:	f000 f808 	bl	8001250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001240:	f7ff ff3c 	bl	80010bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40022000 	.word	0x40022000

08001250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_InitTick+0x54>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_InitTick+0x58>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	fbb3 f3f1 	udiv	r3, r3, r1
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f93b 	bl	80014ea <HAL_SYSTICK_Config>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e00e      	b.n	800129c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b0f      	cmp	r3, #15
 8001282:	d80a      	bhi.n	800129a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001284:	2200      	movs	r2, #0
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f000 f903 	bl	8001496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001290:	4a06      	ldr	r2, [pc, #24]	; (80012ac <HAL_InitTick+0x5c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e000      	b.n	800129c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000034 	.word	0x20000034
 80012a8:	2000003c 	.word	0x2000003c
 80012ac:	20000038 	.word	0x20000038

080012b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_IncTick+0x1c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_IncTick+0x20>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a03      	ldr	r2, [pc, #12]	; (80012d0 <HAL_IncTick+0x20>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	2000003c 	.word	0x2000003c
 80012d0:	20000100 	.word	0x20000100

080012d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return uwTick;
 80012d8:	4b02      	ldr	r3, [pc, #8]	; (80012e4 <HAL_GetTick+0x10>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	20000100 	.word	0x20000100

080012e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60d3      	str	r3, [r2, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db0b      	blt.n	8001376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f003 021f 	and.w	r2, r3, #31
 8001364:	4906      	ldr	r1, [pc, #24]	; (8001380 <__NVIC_EnableIRQ+0x34>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	2001      	movs	r0, #1
 800136e:	fa00 f202 	lsl.w	r2, r0, r2
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	; (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800144c:	d301      	bcc.n	8001452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144e:	2301      	movs	r3, #1
 8001450:	e00f      	b.n	8001472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <SysTick_Config+0x40>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145a:	210f      	movs	r1, #15
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f7ff ff90 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <SysTick_Config+0x40>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <SysTick_Config+0x40>)
 800146c:	2207      	movs	r2, #7
 800146e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	e000e010 	.word	0xe000e010

08001480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff2d 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a8:	f7ff ff42 	bl	8001330 <__NVIC_GetPriorityGrouping>
 80014ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f7ff ff90 	bl	80013d8 <NVIC_EncodePriority>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff5f 	bl	8001384 <__NVIC_SetPriority>
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff35 	bl	800134c <__NVIC_EnableIRQ>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffa2 	bl	800143c <SysTick_Config>
 80014f8:	4603      	mov	r3, r0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001504:	b480      	push	{r7}
 8001506:	b08b      	sub	sp, #44	; 0x2c
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001516:	e148      	b.n	80017aa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001518:	2201      	movs	r2, #1
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	429a      	cmp	r2, r3
 8001532:	f040 8137 	bne.w	80017a4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4aa3      	ldr	r2, [pc, #652]	; (80017c8 <HAL_GPIO_Init+0x2c4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d05e      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 8001540:	4aa1      	ldr	r2, [pc, #644]	; (80017c8 <HAL_GPIO_Init+0x2c4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d875      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 8001546:	4aa1      	ldr	r2, [pc, #644]	; (80017cc <HAL_GPIO_Init+0x2c8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d058      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 800154c:	4a9f      	ldr	r2, [pc, #636]	; (80017cc <HAL_GPIO_Init+0x2c8>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d86f      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 8001552:	4a9f      	ldr	r2, [pc, #636]	; (80017d0 <HAL_GPIO_Init+0x2cc>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d052      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 8001558:	4a9d      	ldr	r2, [pc, #628]	; (80017d0 <HAL_GPIO_Init+0x2cc>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d869      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 800155e:	4a9d      	ldr	r2, [pc, #628]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d04c      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 8001564:	4a9b      	ldr	r2, [pc, #620]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d863      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 800156a:	4a9b      	ldr	r2, [pc, #620]	; (80017d8 <HAL_GPIO_Init+0x2d4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d046      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 8001570:	4a99      	ldr	r2, [pc, #612]	; (80017d8 <HAL_GPIO_Init+0x2d4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d85d      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 8001576:	2b12      	cmp	r3, #18
 8001578:	d82a      	bhi.n	80015d0 <HAL_GPIO_Init+0xcc>
 800157a:	2b12      	cmp	r3, #18
 800157c:	d859      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 800157e:	a201      	add	r2, pc, #4	; (adr r2, 8001584 <HAL_GPIO_Init+0x80>)
 8001580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001584:	080015ff 	.word	0x080015ff
 8001588:	080015d9 	.word	0x080015d9
 800158c:	080015eb 	.word	0x080015eb
 8001590:	0800162d 	.word	0x0800162d
 8001594:	08001633 	.word	0x08001633
 8001598:	08001633 	.word	0x08001633
 800159c:	08001633 	.word	0x08001633
 80015a0:	08001633 	.word	0x08001633
 80015a4:	08001633 	.word	0x08001633
 80015a8:	08001633 	.word	0x08001633
 80015ac:	08001633 	.word	0x08001633
 80015b0:	08001633 	.word	0x08001633
 80015b4:	08001633 	.word	0x08001633
 80015b8:	08001633 	.word	0x08001633
 80015bc:	08001633 	.word	0x08001633
 80015c0:	08001633 	.word	0x08001633
 80015c4:	08001633 	.word	0x08001633
 80015c8:	080015e1 	.word	0x080015e1
 80015cc:	080015f5 	.word	0x080015f5
 80015d0:	4a82      	ldr	r2, [pc, #520]	; (80017dc <HAL_GPIO_Init+0x2d8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d013      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015d6:	e02c      	b.n	8001632 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	623b      	str	r3, [r7, #32]
          break;
 80015de:	e029      	b.n	8001634 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	3304      	adds	r3, #4
 80015e6:	623b      	str	r3, [r7, #32]
          break;
 80015e8:	e024      	b.n	8001634 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	3308      	adds	r3, #8
 80015f0:	623b      	str	r3, [r7, #32]
          break;
 80015f2:	e01f      	b.n	8001634 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	330c      	adds	r3, #12
 80015fa:	623b      	str	r3, [r7, #32]
          break;
 80015fc:	e01a      	b.n	8001634 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001606:	2304      	movs	r3, #4
 8001608:	623b      	str	r3, [r7, #32]
          break;
 800160a:	e013      	b.n	8001634 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d105      	bne.n	8001620 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001614:	2308      	movs	r3, #8
 8001616:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	611a      	str	r2, [r3, #16]
          break;
 800161e:	e009      	b.n	8001634 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001620:	2308      	movs	r3, #8
 8001622:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	615a      	str	r2, [r3, #20]
          break;
 800162a:	e003      	b.n	8001634 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
          break;
 8001630:	e000      	b.n	8001634 <HAL_GPIO_Init+0x130>
          break;
 8001632:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2bff      	cmp	r3, #255	; 0xff
 8001638:	d801      	bhi.n	800163e <HAL_GPIO_Init+0x13a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	e001      	b.n	8001642 <HAL_GPIO_Init+0x13e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3304      	adds	r3, #4
 8001642:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2bff      	cmp	r3, #255	; 0xff
 8001648:	d802      	bhi.n	8001650 <HAL_GPIO_Init+0x14c>
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	e002      	b.n	8001656 <HAL_GPIO_Init+0x152>
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	3b08      	subs	r3, #8
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	210f      	movs	r1, #15
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	fa01 f303 	lsl.w	r3, r1, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	401a      	ands	r2, r3
 8001668:	6a39      	ldr	r1, [r7, #32]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	fa01 f303 	lsl.w	r3, r1, r3
 8001670:	431a      	orrs	r2, r3
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 8090 	beq.w	80017a4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001684:	4b56      	ldr	r3, [pc, #344]	; (80017e0 <HAL_GPIO_Init+0x2dc>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a55      	ldr	r2, [pc, #340]	; (80017e0 <HAL_GPIO_Init+0x2dc>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b53      	ldr	r3, [pc, #332]	; (80017e0 <HAL_GPIO_Init+0x2dc>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800169c:	4a51      	ldr	r2, [pc, #324]	; (80017e4 <HAL_GPIO_Init+0x2e0>)
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	089b      	lsrs	r3, r3, #2
 80016a2:	3302      	adds	r3, #2
 80016a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	220f      	movs	r2, #15
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4013      	ands	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a49      	ldr	r2, [pc, #292]	; (80017e8 <HAL_GPIO_Init+0x2e4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d00d      	beq.n	80016e4 <HAL_GPIO_Init+0x1e0>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a48      	ldr	r2, [pc, #288]	; (80017ec <HAL_GPIO_Init+0x2e8>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d007      	beq.n	80016e0 <HAL_GPIO_Init+0x1dc>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a47      	ldr	r2, [pc, #284]	; (80017f0 <HAL_GPIO_Init+0x2ec>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d101      	bne.n	80016dc <HAL_GPIO_Init+0x1d8>
 80016d8:	2302      	movs	r3, #2
 80016da:	e004      	b.n	80016e6 <HAL_GPIO_Init+0x1e2>
 80016dc:	2303      	movs	r3, #3
 80016de:	e002      	b.n	80016e6 <HAL_GPIO_Init+0x1e2>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <HAL_GPIO_Init+0x1e2>
 80016e4:	2300      	movs	r3, #0
 80016e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e8:	f002 0203 	and.w	r2, r2, #3
 80016ec:	0092      	lsls	r2, r2, #2
 80016ee:	4093      	lsls	r3, r2
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016f6:	493b      	ldr	r1, [pc, #236]	; (80017e4 <HAL_GPIO_Init+0x2e0>)
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	089b      	lsrs	r3, r3, #2
 80016fc:	3302      	adds	r3, #2
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001710:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	4937      	ldr	r1, [pc, #220]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	608b      	str	r3, [r1, #8]
 800171c:	e006      	b.n	800172c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800171e:	4b35      	ldr	r3, [pc, #212]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	43db      	mvns	r3, r3
 8001726:	4933      	ldr	r1, [pc, #204]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 8001728:	4013      	ands	r3, r2
 800172a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001738:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	492d      	ldr	r1, [pc, #180]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	60cb      	str	r3, [r1, #12]
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001746:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	43db      	mvns	r3, r3
 800174e:	4929      	ldr	r1, [pc, #164]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 8001750:	4013      	ands	r3, r2
 8001752:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d006      	beq.n	800176e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001760:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	4923      	ldr	r1, [pc, #140]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
 800176c:	e006      	b.n	800177c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	43db      	mvns	r3, r3
 8001776:	491f      	ldr	r1, [pc, #124]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 8001778:	4013      	ands	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d006      	beq.n	8001796 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4919      	ldr	r1, [pc, #100]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	600b      	str	r3, [r1, #0]
 8001794:	e006      	b.n	80017a4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	43db      	mvns	r3, r3
 800179e:	4915      	ldr	r1, [pc, #84]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	3301      	adds	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	fa22 f303 	lsr.w	r3, r2, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f47f aeaf 	bne.w	8001518 <HAL_GPIO_Init+0x14>
  }
}
 80017ba:	bf00      	nop
 80017bc:	bf00      	nop
 80017be:	372c      	adds	r7, #44	; 0x2c
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	10320000 	.word	0x10320000
 80017cc:	10310000 	.word	0x10310000
 80017d0:	10220000 	.word	0x10220000
 80017d4:	10210000 	.word	0x10210000
 80017d8:	10120000 	.word	0x10120000
 80017dc:	10110000 	.word	0x10110000
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010000 	.word	0x40010000
 80017e8:	40010800 	.word	0x40010800
 80017ec:	40010c00 	.word	0x40010c00
 80017f0:	40011000 	.word	0x40011000
 80017f4:	40010400 	.word	0x40010400

080017f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	4013      	ands	r3, r2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e001      	b.n	800181a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800181a:	7bfb      	ldrb	r3, [r7, #15]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	807b      	strh	r3, [r7, #2]
 8001832:	4613      	mov	r3, r2
 8001834:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001836:	787b      	ldrb	r3, [r7, #1]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183c:	887a      	ldrh	r2, [r7, #2]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001842:	e003      	b.n	800184c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001844:	887b      	ldrh	r3, [r7, #2]
 8001846:	041a      	lsls	r2, r3, #16
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	611a      	str	r2, [r3, #16]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
	...

08001858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e26c      	b.n	8001d44 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8087 	beq.w	8001986 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001878:	4b92      	ldr	r3, [pc, #584]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b04      	cmp	r3, #4
 8001882:	d00c      	beq.n	800189e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001884:	4b8f      	ldr	r3, [pc, #572]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b08      	cmp	r3, #8
 800188e:	d112      	bne.n	80018b6 <HAL_RCC_OscConfig+0x5e>
 8001890:	4b8c      	ldr	r3, [pc, #560]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189c:	d10b      	bne.n	80018b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189e:	4b89      	ldr	r3, [pc, #548]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d06c      	beq.n	8001984 <HAL_RCC_OscConfig+0x12c>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d168      	bne.n	8001984 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e246      	b.n	8001d44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x76>
 80018c0:	4b80      	ldr	r3, [pc, #512]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a7f      	ldr	r2, [pc, #508]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e02e      	b.n	800192c <HAL_RCC_OscConfig+0xd4>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x98>
 80018d6:	4b7b      	ldr	r3, [pc, #492]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a7a      	ldr	r2, [pc, #488]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b78      	ldr	r3, [pc, #480]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a77      	ldr	r2, [pc, #476]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e01d      	b.n	800192c <HAL_RCC_OscConfig+0xd4>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0xbc>
 80018fa:	4b72      	ldr	r3, [pc, #456]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a71      	ldr	r2, [pc, #452]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b6f      	ldr	r3, [pc, #444]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6e      	ldr	r2, [pc, #440]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e00b      	b.n	800192c <HAL_RCC_OscConfig+0xd4>
 8001914:	4b6b      	ldr	r3, [pc, #428]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a6a      	ldr	r2, [pc, #424]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 800191a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b68      	ldr	r3, [pc, #416]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a67      	ldr	r2, [pc, #412]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800192a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d013      	beq.n	800195c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fcce 	bl	80012d4 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fcca 	bl	80012d4 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	; 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e1fa      	b.n	8001d44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	4b5d      	ldr	r3, [pc, #372]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0xe4>
 800195a:	e014      	b.n	8001986 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fcba 	bl	80012d4 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff fcb6 	bl	80012d4 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e1e6      	b.n	8001d44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x10c>
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d063      	beq.n	8001a5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001992:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800199e:	4b49      	ldr	r3, [pc, #292]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d11c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x18c>
 80019aa:	4b46      	ldr	r3, [pc, #280]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d116      	bne.n	80019e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <HAL_RCC_OscConfig+0x176>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e1ba      	b.n	8001d44 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ce:	4b3d      	ldr	r3, [pc, #244]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4939      	ldr	r1, [pc, #228]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	e03a      	b.n	8001a5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ec:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7ff fc6f 	bl	80012d4 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff fc6b 	bl	80012d4 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e19b      	b.n	8001d44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4927      	ldr	r1, [pc, #156]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	e015      	b.n	8001a5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fc4e 	bl	80012d4 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fc4a 	bl	80012d4 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e17a      	b.n	8001d44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d03a      	beq.n	8001adc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d019      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_RCC_OscConfig+0x274>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a74:	f7ff fc2e 	bl	80012d4 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fc2a 	bl	80012d4 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e15a      	b.n	8001d44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f000 fa9a 	bl	8001fd4 <RCC_Delay>
 8001aa0:	e01c      	b.n	8001adc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_RCC_OscConfig+0x274>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fc14 	bl	80012d4 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aae:	e00f      	b.n	8001ad0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab0:	f7ff fc10 	bl	80012d4 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d908      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e140      	b.n	8001d44 <HAL_RCC_OscConfig+0x4ec>
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	42420000 	.word	0x42420000
 8001acc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	4b9e      	ldr	r3, [pc, #632]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1e9      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a6 	beq.w	8001c36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aee:	4b97      	ldr	r3, [pc, #604]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10d      	bne.n	8001b16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b94      	ldr	r3, [pc, #592]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a93      	ldr	r2, [pc, #588]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	61d3      	str	r3, [r2, #28]
 8001b06:	4b91      	ldr	r3, [pc, #580]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b12:	2301      	movs	r3, #1
 8001b14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b16:	4b8e      	ldr	r3, [pc, #568]	; (8001d50 <HAL_RCC_OscConfig+0x4f8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d118      	bne.n	8001b54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b22:	4b8b      	ldr	r3, [pc, #556]	; (8001d50 <HAL_RCC_OscConfig+0x4f8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a8a      	ldr	r2, [pc, #552]	; (8001d50 <HAL_RCC_OscConfig+0x4f8>)
 8001b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fbd1 	bl	80012d4 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b36:	f7ff fbcd 	bl	80012d4 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b64      	cmp	r3, #100	; 0x64
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e0fd      	b.n	8001d44 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b48:	4b81      	ldr	r3, [pc, #516]	; (8001d50 <HAL_RCC_OscConfig+0x4f8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x312>
 8001b5c:	4b7b      	ldr	r3, [pc, #492]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4a7a      	ldr	r2, [pc, #488]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6213      	str	r3, [r2, #32]
 8001b68:	e02d      	b.n	8001bc6 <HAL_RCC_OscConfig+0x36e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x334>
 8001b72:	4b76      	ldr	r3, [pc, #472]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4a75      	ldr	r2, [pc, #468]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	6213      	str	r3, [r2, #32]
 8001b7e:	4b73      	ldr	r3, [pc, #460]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4a72      	ldr	r2, [pc, #456]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	f023 0304 	bic.w	r3, r3, #4
 8001b88:	6213      	str	r3, [r2, #32]
 8001b8a:	e01c      	b.n	8001bc6 <HAL_RCC_OscConfig+0x36e>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d10c      	bne.n	8001bae <HAL_RCC_OscConfig+0x356>
 8001b94:	4b6d      	ldr	r3, [pc, #436]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4a6c      	ldr	r2, [pc, #432]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	6213      	str	r3, [r2, #32]
 8001ba0:	4b6a      	ldr	r3, [pc, #424]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a69      	ldr	r2, [pc, #420]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6213      	str	r3, [r2, #32]
 8001bac:	e00b      	b.n	8001bc6 <HAL_RCC_OscConfig+0x36e>
 8001bae:	4b67      	ldr	r3, [pc, #412]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	4a66      	ldr	r2, [pc, #408]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	6213      	str	r3, [r2, #32]
 8001bba:	4b64      	ldr	r3, [pc, #400]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4a63      	ldr	r2, [pc, #396]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	f023 0304 	bic.w	r3, r3, #4
 8001bc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d015      	beq.n	8001bfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7ff fb81 	bl	80012d4 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7ff fb7d 	bl	80012d4 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e0ab      	b.n	8001d44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bec:	4b57      	ldr	r3, [pc, #348]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0ee      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x37e>
 8001bf8:	e014      	b.n	8001c24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfa:	f7ff fb6b 	bl	80012d4 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7ff fb67 	bl	80012d4 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e095      	b.n	8001d44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c18:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1ee      	bne.n	8001c02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c24:	7dfb      	ldrb	r3, [r7, #23]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d105      	bne.n	8001c36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c2a:	4b48      	ldr	r3, [pc, #288]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a47      	ldr	r2, [pc, #284]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8081 	beq.w	8001d42 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c40:	4b42      	ldr	r3, [pc, #264]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d061      	beq.n	8001d10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d146      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c54:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <HAL_RCC_OscConfig+0x4fc>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fb3b 	bl	80012d4 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff fb37 	bl	80012d4 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e067      	b.n	8001d44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c74:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f0      	bne.n	8001c62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c88:	d108      	bne.n	8001c9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c8a:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	492d      	ldr	r1, [pc, #180]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9c:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a19      	ldr	r1, [r3, #32]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	430b      	orrs	r3, r1
 8001cae:	4927      	ldr	r1, [pc, #156]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_RCC_OscConfig+0x4fc>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7ff fb0b 	bl	80012d4 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7ff fb07 	bl	80012d4 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e037      	b.n	8001d44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x46a>
 8001ce0:	e02f      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <HAL_RCC_OscConfig+0x4fc>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff faf4 	bl	80012d4 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff faf0 	bl	80012d4 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e020      	b.n	8001d44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x498>
 8001d0e:	e018      	b.n	8001d42 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e013      	b.n	8001d44 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40007000 	.word	0x40007000
 8001d54:	42420060 	.word	0x42420060

08001d58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0d0      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b6a      	ldr	r3, [pc, #424]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d910      	bls.n	8001d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b67      	ldr	r3, [pc, #412]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 0207 	bic.w	r2, r3, #7
 8001d82:	4965      	ldr	r1, [pc, #404]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b63      	ldr	r3, [pc, #396]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0b8      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d020      	beq.n	8001dea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db4:	4b59      	ldr	r3, [pc, #356]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4a58      	ldr	r2, [pc, #352]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dcc:	4b53      	ldr	r3, [pc, #332]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	4a52      	ldr	r2, [pc, #328]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd8:	4b50      	ldr	r3, [pc, #320]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	494d      	ldr	r1, [pc, #308]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d040      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	4b47      	ldr	r3, [pc, #284]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d115      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e07f      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d107      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e16:	4b41      	ldr	r3, [pc, #260]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e073      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e06b      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e36:	4b39      	ldr	r3, [pc, #228]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f023 0203 	bic.w	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4936      	ldr	r1, [pc, #216]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e48:	f7ff fa44 	bl	80012d4 <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e50:	f7ff fa40 	bl	80012d4 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e053      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 020c 	and.w	r2, r3, #12
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d1eb      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e78:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d210      	bcs.n	8001ea8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 0207 	bic.w	r2, r3, #7
 8001e8e:	4922      	ldr	r1, [pc, #136]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e032      	b.n	8001f0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb4:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	4916      	ldr	r1, [pc, #88]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	490e      	ldr	r1, [pc, #56]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ee6:	f000 f821 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8001eea:	4602      	mov	r2, r0
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	490a      	ldr	r1, [pc, #40]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef8:	5ccb      	ldrb	r3, [r1, r3]
 8001efa:	fa22 f303 	lsr.w	r3, r2, r3
 8001efe:	4a09      	ldr	r2, [pc, #36]	; (8001f24 <HAL_RCC_ClockConfig+0x1cc>)
 8001f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_RCC_ClockConfig+0x1d0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff f9a2 	bl	8001250 <HAL_InitTick>

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40022000 	.word	0x40022000
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	08002850 	.word	0x08002850
 8001f24:	20000034 	.word	0x20000034
 8001f28:	20000038 	.word	0x20000038

08001f2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f46:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d002      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x30>
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d003      	beq.n	8001f62 <HAL_RCC_GetSysClockFreq+0x36>
 8001f5a:	e027      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f5e:	613b      	str	r3, [r7, #16]
      break;
 8001f60:	e027      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	0c9b      	lsrs	r3, r3, #18
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f6c:	5cd3      	ldrb	r3, [r2, r3]
 8001f6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d010      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	0c5b      	lsrs	r3, r3, #17
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f86:	5cd3      	ldrb	r3, [r2, r3]
 8001f88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f8e:	fb02 f203 	mul.w	r2, r2, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	e004      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a0c      	ldr	r2, [pc, #48]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fa0:	fb02 f303 	mul.w	r3, r2, r3
 8001fa4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	613b      	str	r3, [r7, #16]
      break;
 8001faa:	e002      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fae:	613b      	str	r3, [r7, #16]
      break;
 8001fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb2:	693b      	ldr	r3, [r7, #16]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	371c      	adds	r7, #28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	007a1200 	.word	0x007a1200
 8001fc8:	08002860 	.word	0x08002860
 8001fcc:	08002870 	.word	0x08002870
 8001fd0:	003d0900 	.word	0x003d0900

08001fd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <RCC_Delay+0x34>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	; (800200c <RCC_Delay+0x38>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0a5b      	lsrs	r3, r3, #9
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ff0:	bf00      	nop
  }
  while (Delay --);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1e5a      	subs	r2, r3, #1
 8001ff6:	60fa      	str	r2, [r7, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f9      	bne.n	8001ff0 <RCC_Delay+0x1c>
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	20000034 	.word	0x20000034
 800200c:	10624dd3 	.word	0x10624dd3

08002010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e041      	b.n	80020a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff f872 	bl	8001120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3304      	adds	r3, #4
 800204c:	4619      	mov	r1, r3
 800204e:	4610      	mov	r0, r2
 8002050:	f000 fa6e 	bl	8002530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d001      	beq.n	80020c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e035      	b.n	8002134 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a16      	ldr	r2, [pc, #88]	; (8002140 <HAL_TIM_Base_Start_IT+0x90>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d009      	beq.n	80020fe <HAL_TIM_Base_Start_IT+0x4e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f2:	d004      	beq.n	80020fe <HAL_TIM_Base_Start_IT+0x4e>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a12      	ldr	r2, [pc, #72]	; (8002144 <HAL_TIM_Base_Start_IT+0x94>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d111      	bne.n	8002122 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2b06      	cmp	r3, #6
 800210e:	d010      	beq.n	8002132 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002120:	e007      	b.n	8002132 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0201 	orr.w	r2, r2, #1
 8002130:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40012c00 	.word	0x40012c00
 8002144:	40000400 	.word	0x40000400

08002148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b02      	cmp	r3, #2
 800215c:	d122      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b02      	cmp	r3, #2
 800216a:	d11b      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0202 	mvn.w	r2, #2
 8002174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f9b4 	bl	80024f8 <HAL_TIM_IC_CaptureCallback>
 8002190:	e005      	b.n	800219e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f9a7 	bl	80024e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f9b6 	bl	800250a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d122      	bne.n	80021f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d11b      	bne.n	80021f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0204 	mvn.w	r2, #4
 80021c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2202      	movs	r2, #2
 80021ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f98a 	bl	80024f8 <HAL_TIM_IC_CaptureCallback>
 80021e4:	e005      	b.n	80021f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f97d 	bl	80024e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f98c 	bl	800250a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b08      	cmp	r3, #8
 8002204:	d122      	bne.n	800224c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b08      	cmp	r3, #8
 8002212:	d11b      	bne.n	800224c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0208 	mvn.w	r2, #8
 800221c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2204      	movs	r2, #4
 8002222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f960 	bl	80024f8 <HAL_TIM_IC_CaptureCallback>
 8002238:	e005      	b.n	8002246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f953 	bl	80024e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f962 	bl	800250a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b10      	cmp	r3, #16
 8002258:	d122      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	2b10      	cmp	r3, #16
 8002266:	d11b      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0210 	mvn.w	r2, #16
 8002270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2208      	movs	r2, #8
 8002276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f936 	bl	80024f8 <HAL_TIM_IC_CaptureCallback>
 800228c:	e005      	b.n	800229a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f929 	bl	80024e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f938 	bl	800250a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d10e      	bne.n	80022cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d107      	bne.n	80022cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0201 	mvn.w	r2, #1
 80022c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe fe46 	bl	8000f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d6:	2b80      	cmp	r3, #128	; 0x80
 80022d8:	d10e      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e4:	2b80      	cmp	r3, #128	; 0x80
 80022e6:	d107      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fa6b 	bl	80027ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002302:	2b40      	cmp	r3, #64	; 0x40
 8002304:	d10e      	bne.n	8002324 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002310:	2b40      	cmp	r3, #64	; 0x40
 8002312:	d107      	bne.n	8002324 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800231c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f8fc 	bl	800251c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b20      	cmp	r3, #32
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b20      	cmp	r3, #32
 800233e:	d107      	bne.n	8002350 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0220 	mvn.w	r2, #32
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fa36 	bl	80027bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_TIM_ConfigClockSource+0x1c>
 8002370:	2302      	movs	r3, #2
 8002372:	e0b4      	b.n	80024de <HAL_TIM_ConfigClockSource+0x186>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800239a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ac:	d03e      	beq.n	800242c <HAL_TIM_ConfigClockSource+0xd4>
 80023ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b2:	f200 8087 	bhi.w	80024c4 <HAL_TIM_ConfigClockSource+0x16c>
 80023b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ba:	f000 8086 	beq.w	80024ca <HAL_TIM_ConfigClockSource+0x172>
 80023be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c2:	d87f      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x16c>
 80023c4:	2b70      	cmp	r3, #112	; 0x70
 80023c6:	d01a      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0xa6>
 80023c8:	2b70      	cmp	r3, #112	; 0x70
 80023ca:	d87b      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x16c>
 80023cc:	2b60      	cmp	r3, #96	; 0x60
 80023ce:	d050      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0x11a>
 80023d0:	2b60      	cmp	r3, #96	; 0x60
 80023d2:	d877      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x16c>
 80023d4:	2b50      	cmp	r3, #80	; 0x50
 80023d6:	d03c      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0xfa>
 80023d8:	2b50      	cmp	r3, #80	; 0x50
 80023da:	d873      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x16c>
 80023dc:	2b40      	cmp	r3, #64	; 0x40
 80023de:	d058      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x13a>
 80023e0:	2b40      	cmp	r3, #64	; 0x40
 80023e2:	d86f      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x16c>
 80023e4:	2b30      	cmp	r3, #48	; 0x30
 80023e6:	d064      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x15a>
 80023e8:	2b30      	cmp	r3, #48	; 0x30
 80023ea:	d86b      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x16c>
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d060      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x15a>
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d867      	bhi.n	80024c4 <HAL_TIM_ConfigClockSource+0x16c>
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d05c      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x15a>
 80023f8:	2b10      	cmp	r3, #16
 80023fa:	d05a      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x15a>
 80023fc:	e062      	b.n	80024c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6899      	ldr	r1, [r3, #8]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f000 f95e 	bl	80026ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	609a      	str	r2, [r3, #8]
      break;
 800242a:	e04f      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	6899      	ldr	r1, [r3, #8]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f000 f947 	bl	80026ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800244e:	609a      	str	r2, [r3, #8]
      break;
 8002450:	e03c      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6859      	ldr	r1, [r3, #4]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	461a      	mov	r2, r3
 8002460:	f000 f8be 	bl	80025e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2150      	movs	r1, #80	; 0x50
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f915 	bl	800269a <TIM_ITRx_SetConfig>
      break;
 8002470:	e02c      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6859      	ldr	r1, [r3, #4]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	461a      	mov	r2, r3
 8002480:	f000 f8dc 	bl	800263c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2160      	movs	r1, #96	; 0x60
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f905 	bl	800269a <TIM_ITRx_SetConfig>
      break;
 8002490:	e01c      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	6859      	ldr	r1, [r3, #4]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	461a      	mov	r2, r3
 80024a0:	f000 f89e 	bl	80025e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2140      	movs	r1, #64	; 0x40
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f8f5 	bl	800269a <TIM_ITRx_SetConfig>
      break;
 80024b0:	e00c      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4619      	mov	r1, r3
 80024bc:	4610      	mov	r0, r2
 80024be:	f000 f8ec 	bl	800269a <TIM_ITRx_SetConfig>
      break;
 80024c2:	e003      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
      break;
 80024c8:	e000      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr

0800250a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
	...

08002530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <TIM_Base_SetConfig+0xa8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d007      	beq.n	8002558 <TIM_Base_SetConfig+0x28>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254e:	d003      	beq.n	8002558 <TIM_Base_SetConfig+0x28>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a22      	ldr	r2, [pc, #136]	; (80025dc <TIM_Base_SetConfig+0xac>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d108      	bne.n	800256a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a1a      	ldr	r2, [pc, #104]	; (80025d8 <TIM_Base_SetConfig+0xa8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d007      	beq.n	8002582 <TIM_Base_SetConfig+0x52>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002578:	d003      	beq.n	8002582 <TIM_Base_SetConfig+0x52>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a17      	ldr	r2, [pc, #92]	; (80025dc <TIM_Base_SetConfig+0xac>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d108      	bne.n	8002594 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4313      	orrs	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <TIM_Base_SetConfig+0xa8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d103      	bne.n	80025c8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	615a      	str	r2, [r3, #20]
}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	40012c00 	.word	0x40012c00
 80025dc:	40000400 	.word	0x40000400

080025e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	f023 0201 	bic.w	r2, r3, #1
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800260a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f023 030a 	bic.w	r3, r3, #10
 800261c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	621a      	str	r2, [r3, #32]
}
 8002632:	bf00      	nop
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	f023 0210 	bic.w	r2, r3, #16
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	031b      	lsls	r3, r3, #12
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002678:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	621a      	str	r2, [r3, #32]
}
 8002690:	bf00      	nop
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800269a:	b480      	push	{r7}
 800269c:	b085      	sub	sp, #20
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f043 0307 	orr.w	r3, r3, #7
 80026bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	609a      	str	r2, [r3, #8]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b087      	sub	sp, #28
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	021a      	lsls	r2, r3, #8
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	609a      	str	r2, [r3, #8]
}
 8002702:	bf00      	nop
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002720:	2302      	movs	r3, #2
 8002722:	e041      	b.n	80027a8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d009      	beq.n	800277c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002770:	d004      	beq.n	800277c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a10      	ldr	r2, [pc, #64]	; (80027b8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d10c      	bne.n	8002796 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002782:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	4313      	orrs	r3, r2
 800278c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40012c00 	.word	0x40012c00
 80027b8:	40000400 	.word	0x40000400

080027bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <__libc_init_array>:
 80027e0:	b570      	push	{r4, r5, r6, lr}
 80027e2:	2600      	movs	r6, #0
 80027e4:	4d0c      	ldr	r5, [pc, #48]	; (8002818 <__libc_init_array+0x38>)
 80027e6:	4c0d      	ldr	r4, [pc, #52]	; (800281c <__libc_init_array+0x3c>)
 80027e8:	1b64      	subs	r4, r4, r5
 80027ea:	10a4      	asrs	r4, r4, #2
 80027ec:	42a6      	cmp	r6, r4
 80027ee:	d109      	bne.n	8002804 <__libc_init_array+0x24>
 80027f0:	f000 f822 	bl	8002838 <_init>
 80027f4:	2600      	movs	r6, #0
 80027f6:	4d0a      	ldr	r5, [pc, #40]	; (8002820 <__libc_init_array+0x40>)
 80027f8:	4c0a      	ldr	r4, [pc, #40]	; (8002824 <__libc_init_array+0x44>)
 80027fa:	1b64      	subs	r4, r4, r5
 80027fc:	10a4      	asrs	r4, r4, #2
 80027fe:	42a6      	cmp	r6, r4
 8002800:	d105      	bne.n	800280e <__libc_init_array+0x2e>
 8002802:	bd70      	pop	{r4, r5, r6, pc}
 8002804:	f855 3b04 	ldr.w	r3, [r5], #4
 8002808:	4798      	blx	r3
 800280a:	3601      	adds	r6, #1
 800280c:	e7ee      	b.n	80027ec <__libc_init_array+0xc>
 800280e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002812:	4798      	blx	r3
 8002814:	3601      	adds	r6, #1
 8002816:	e7f2      	b.n	80027fe <__libc_init_array+0x1e>
 8002818:	08002874 	.word	0x08002874
 800281c:	08002874 	.word	0x08002874
 8002820:	08002874 	.word	0x08002874
 8002824:	08002878 	.word	0x08002878

08002828 <memset>:
 8002828:	4603      	mov	r3, r0
 800282a:	4402      	add	r2, r0
 800282c:	4293      	cmp	r3, r2
 800282e:	d100      	bne.n	8002832 <memset+0xa>
 8002830:	4770      	bx	lr
 8002832:	f803 1b01 	strb.w	r1, [r3], #1
 8002836:	e7f9      	b.n	800282c <memset+0x4>

08002838 <_init>:
 8002838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283a:	bf00      	nop
 800283c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800283e:	bc08      	pop	{r3}
 8002840:	469e      	mov	lr, r3
 8002842:	4770      	bx	lr

08002844 <_fini>:
 8002844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002846:	bf00      	nop
 8002848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800284a:	bc08      	pop	{r3}
 800284c:	469e      	mov	lr, r3
 800284e:	4770      	bx	lr
